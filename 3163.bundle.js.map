{"version":3,"file":"3163.bundle.js","mappings":"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","sources":["webpack://joyride/./node_modules/three/src/math/MathUtils.js","webpack://joyride/./node_modules/three/src/math/Quaternion.js"],"sourcesContent":["const _lut = [];\n\nfor ( let i = 0; i < 256; i ++ ) {\n\n\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n}\n\nlet _seed = 1234567;\n\n\nconst DEG2RAD = Math.PI / 180;\nconst RAD2DEG = 180 / Math.PI;\n\n// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\nfunction generateUUID() {\n\n\tconst d0 = Math.random() * 0xffffffff | 0;\n\tconst d1 = Math.random() * 0xffffffff | 0;\n\tconst d2 = Math.random() * 0xffffffff | 0;\n\tconst d3 = Math.random() * 0xffffffff | 0;\n\tconst uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t// .toLowerCase() here flattens concatenated strings to save heap memory space.\n\treturn uuid.toLowerCase();\n\n}\n\nfunction clamp( value, min, max ) {\n\n\treturn Math.max( min, Math.min( max, value ) );\n\n}\n\n// compute euclidean modulo of m % n\n// https://en.wikipedia.org/wiki/Modulo_operation\nfunction euclideanModulo( n, m ) {\n\n\treturn ( ( n % m ) + m ) % m;\n\n}\n\n// Linear mapping from range <a1, a2> to range <b1, b2>\nfunction mapLinear( x, a1, a2, b1, b2 ) {\n\n\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n}\n\n// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\nfunction inverseLerp( x, y, value ) {\n\n\tif ( x !== y ) {\n\n\t\treturn ( value - x ) / ( y - x );\n\n\t} else {\n\n\t\treturn 0;\n\n\t}\n\n}\n\n// https://en.wikipedia.org/wiki/Linear_interpolation\nfunction lerp( x, y, t ) {\n\n\treturn ( 1 - t ) * x + t * y;\n\n}\n\n// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\nfunction damp( x, y, lambda, dt ) {\n\n\treturn lerp( x, y, 1 - Math.exp( - lambda * dt ) );\n\n}\n\n// https://www.desmos.com/calculator/vcsjnyz7x4\nfunction pingpong( x, length = 1 ) {\n\n\treturn length - Math.abs( euclideanModulo( x, length * 2 ) - length );\n\n}\n\n// http://en.wikipedia.org/wiki/Smoothstep\nfunction smoothstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * ( 3 - 2 * x );\n\n}\n\nfunction smootherstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n}\n\n// Random integer from <low, high> interval\nfunction randInt( low, high ) {\n\n\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n}\n\n// Random float from <low, high> interval\nfunction randFloat( low, high ) {\n\n\treturn low + Math.random() * ( high - low );\n\n}\n\n// Random float from <-range/2, range/2> interval\nfunction randFloatSpread( range ) {\n\n\treturn range * ( 0.5 - Math.random() );\n\n}\n\n// Deterministic pseudo-random float in the interval [ 0, 1 ]\nfunction seededRandom( s ) {\n\n\tif ( s !== undefined ) _seed = s;\n\n\t// Mulberry32 generator\n\n\tlet t = _seed += 0x6D2B79F5;\n\n\tt = Math.imul( t ^ t >>> 15, t | 1 );\n\n\tt ^= t + Math.imul( t ^ t >>> 7, t | 61 );\n\n\treturn ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;\n\n}\n\nfunction degToRad( degrees ) {\n\n\treturn degrees * DEG2RAD;\n\n}\n\nfunction radToDeg( radians ) {\n\n\treturn radians * RAD2DEG;\n\n}\n\nfunction isPowerOfTwo( value ) {\n\n\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n}\n\nfunction ceilPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction floorPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction setQuaternionFromProperEuler( q, a, b, c, order ) {\n\n\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\n\t// rotations are applied to the axes in the order specified by 'order'\n\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t// angles are in radians\n\n\tconst cos = Math.cos;\n\tconst sin = Math.sin;\n\n\tconst c2 = cos( b / 2 );\n\tconst s2 = sin( b / 2 );\n\n\tconst c13 = cos( ( a + c ) / 2 );\n\tconst s13 = sin( ( a + c ) / 2 );\n\n\tconst c1_3 = cos( ( a - c ) / 2 );\n\tconst s1_3 = sin( ( a - c ) / 2 );\n\n\tconst c3_1 = cos( ( c - a ) / 2 );\n\tconst s3_1 = sin( ( c - a ) / 2 );\n\n\tswitch ( order ) {\n\n\t\tcase 'XYX':\n\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YZY':\n\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZXZ':\n\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'XZX':\n\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YXY':\n\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZYZ':\n\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\n\n\t}\n\n}\n\nfunction denormalize( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint16Array:\n\n\t\t\treturn value / 65535.0;\n\n\t\tcase Uint8Array:\n\n\t\t\treturn value / 255.0;\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.max( value / 32767.0, - 1.0 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.max( value / 127.0, - 1.0 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\nfunction normalize( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint16Array:\n\n\t\t\treturn Math.round( value * 65535.0 );\n\n\t\tcase Uint8Array:\n\n\t\t\treturn Math.round( value * 255.0 );\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.round( value * 32767.0 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.round( value * 127.0 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\n\n\nexport {\n\tDEG2RAD,\n\tRAD2DEG,\n\tgenerateUUID,\n\tclamp,\n\teuclideanModulo,\n\tmapLinear,\n\tinverseLerp,\n\tlerp,\n\tdamp,\n\tpingpong,\n\tsmoothstep,\n\tsmootherstep,\n\trandInt,\n\trandFloat,\n\trandFloatSpread,\n\tseededRandom,\n\tdegToRad,\n\tradToDeg,\n\tisPowerOfTwo,\n\tceilPowerOfTwo,\n\tfloorPowerOfTwo,\n\tsetQuaternionFromProperEuler,\n\tnormalize,\n\tdenormalize,\n};\n","import * as MathUtils from './MathUtils.js';\n\nclass Quaternion {\n\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t}\n\n\tstatic slerp( qa, qb, qm, t ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.' );\n\t\treturn qm.slerpQuaternions( qa, qb, t );\n\n\t}\n\n\tstatic slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tlet x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( t === 0 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( t === 1 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x1;\n\t\t\tdst[ dstOffset + 1 ] = y1;\n\t\t\tdst[ dstOffset + 2 ] = z1;\n\t\t\tdst[ dstOffset + 3 ] = w1;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tlet s = 1 - t;\n\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tconst sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tconst tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tconst f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n\tstatic multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\n\n\t\tconst x0 = src0[ srcOffset0 ];\n\t\tconst y0 = src0[ srcOffset0 + 1 ];\n\t\tconst z0 = src0[ srcOffset0 + 2 ];\n\t\tconst w0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 ];\n\t\tconst y1 = src1[ srcOffset1 + 1 ];\n\t\tconst z1 = src1[ srcOffset1 + 2 ];\n\t\tconst w1 = src1[ srcOffset1 + 3 ];\n\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\n\t\treturn dst;\n\n\t}\n\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget w() {\n\n\t\treturn this._w;\n\n\t}\n\n\tset w( value ) {\n\n\t\tthis._w = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tset( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t}\n\n\tcopy( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromEuler( euler, update ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tconst x = euler._x, y = euler._y, z = euler._z, order = euler._order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\n\t\tconst c1 = cos( x / 2 );\n\t\tconst c2 = cos( y / 2 );\n\t\tconst c3 = cos( z / 2 );\n\n\t\tconst s1 = sin( x / 2 );\n\t\tconst s2 = sin( y / 2 );\n\t\tconst s3 = sin( z / 2 );\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tif ( update !== false ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAxisAngle( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tconst halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\tconst s = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromUnitVectors( vFrom, vTo ) {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tlet r = vFrom.dot( vTo ) + 1;\n\n\t\tif ( r < Number.EPSILON ) {\n\n\t\t\t// vFrom and vTo point in opposite directions\n\n\t\t\tr = 0;\n\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\n\t\t}\n\n\t\treturn this.normalize();\n\n\t}\n\n\tangleTo( q ) {\n\n\t\treturn 2 * Math.acos( Math.abs( MathUtils.clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t}\n\n\trotateTowards( q, step ) {\n\n\t\tconst angle = this.angleTo( q );\n\n\t\tif ( angle === 0 ) return this;\n\n\t\tconst t = Math.min( 1, step / angle );\n\n\t\tthis.slerp( q, t );\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\treturn this.set( 0, 0, 0, 1 );\n\n\t}\n\n\tinvert() {\n\n\t\t// quaternion is assumed to have unit length\n\n\t\treturn this.conjugate();\n\n\t}\n\n\tconjugate() {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t}\n\n\tnormalize() {\n\n\t\tlet l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( q, p ) {\n\n\t\tif ( p !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t}\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t}\n\n\tpremultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t}\n\n\tmultiplyQuaternions( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tconst qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tconst qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerp( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tconst x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\tconst s = 1 - t;\n\t\t\tthis._w = s * w + t * this._w;\n\t\t\tthis._x = s * x + t * this._x;\n\t\t\tthis._y = s * y + t * this._y;\n\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\tthis.normalize();\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\tconst halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tconst ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerpQuaternions( qa, qb, t ) {\n\n\t\treturn this.copy( qa ).slerp( qb, t );\n\n\t}\n\n\trandom() {\n\n\t\t// Derived from http://planning.cs.uiuc.edu/node198.html\n\t\t// Note, this source uses w, x, y, z ordering,\n\t\t// so we swap the order below.\n\n\t\tconst u1 = Math.random();\n\t\tconst sqrt1u1 = Math.sqrt( 1 - u1 );\n\t\tconst sqrtu1 = Math.sqrt( u1 );\n\n\t\tconst u2 = 2 * Math.PI * Math.random();\n\n\t\tconst u3 = 2 * Math.PI * Math.random();\n\n\t\treturn this.set(\n\t\t\tsqrt1u1 * Math.cos( u2 ),\n\t\t\tsqrtu1 * Math.sin( u3 ),\n\t\t\tsqrtu1 * Math.cos( u3 ),\n\t\t\tsqrt1u1 * Math.sin( u2 ),\n\t\t);\n\n\t}\n\n\tequals( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis._x = attribute.getX( index );\n\t\tthis._y = attribute.getY( index );\n\t\tthis._z = attribute.getZ( index );\n\t\tthis._w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this._x;\n\t\tyield this._y;\n\t\tyield this._z;\n\t\tyield this._w;\n\n\t}\n\n}\n\nQuaternion.prototype.isQuaternion = true;\n\nexport { Quaternion };\n"],"names":["_lut","i","toString","DEG2RAD","Math","PI","RAD2DEG","generateUUID","d0","random","d1","d2","d3","toLowerCase","clamp","value","min","max","euclideanModulo","n","m","lerp","x","y","t","isPowerOfTwo","floorPowerOfTwo","pow","floor","log","LN2","Quaternion","constructor","z","w","this","_x","_y","_z","_w","static","qa","qb","qm","console","warn","slerpQuaternions","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","s","cos","dir","sqrSin","Number","EPSILON","sin","sqrt","len","atan2","tDir","f","_onChangeCallback","set","clone","copy","quaternion","setFromEuler","euler","update","isEuler","Error","order","_order","c1","c2","c3","s1","s2","s3","setFromAxisAngle","axis","angle","halfAngle","setFromRotationMatrix","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","vFrom","vTo","r","dot","abs","normalize","angleTo","q","acos","rotateTowards","step","slerp","identity","invert","conjugate","v","lengthSq","length","l","multiply","p","undefined","multiplyQuaternions","premultiply","a","b","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","u1","sqrt1u1","sqrtu1","u2","u3","equals","fromArray","array","offset","toArray","fromBufferAttribute","attribute","index","getX","getY","getZ","getW","_onChange","callback","Symbol","iterator","prototype","isQuaternion"],"sourceRoot":""}