{"version":3,"file":"9150.bundle.js","mappings":"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","sources":["webpack://joyride/./node_modules/three/src/materials/Material.js","webpack://joyride/./node_modules/three/src/materials/MeshBasicMaterial.js","webpack://joyride/./node_modules/three/src/math/Ray.js","webpack://joyride/./node_modules/three/src/math/Triangle.js","webpack://joyride/./node_modules/three/src/objects/Mesh.js"],"sourcesContent":["import { EventDispatcher } from '../core/EventDispatcher.js';\nimport { FrontSide, FlatShading, NormalBlending, LessEqualDepth, AddEquation, OneMinusSrcAlphaFactor, SrcAlphaFactor, AlwaysStencilFunc, KeepStencilOp } from '../constants.js';\nimport * as MathUtils from '../math/MathUtils.js';\n\nlet materialId = 0;\n\nclass Material extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.vertexColors = false;\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaToCoverage = false;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.visible = true;\n\n\t\tthis.toneMapped = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\n\t\tthis._alphaTest = 0;\n\n\t}\n\n\tget alphaTest() {\n\n\t\treturn this._alphaTest;\n\n\t}\n\n\tset alphaTest( value ) {\n\n\t\tif ( this._alphaTest > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._alphaTest = value;\n\n\t}\n\n\tonBuild( /* shaderobject, renderer */ ) {}\n\n\tonBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}\n\n\tonBeforeCompile( /* shaderobject, renderer */ ) {}\n\n\tcustomProgramCacheKey() {\n\n\t\treturn this.onBeforeCompile.toString();\n\n\t}\n\n\tsetValues( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( const key in values ) {\n\n\t\t\tconst newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Material: \\'' + key + '\\' parameter is undefined.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// for backward compatibility if shading is set in the constructor\n\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRootObject ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.sheen !== undefined ) data.sheen = this.sheen;\n\t\tif ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();\n\t\tif ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\tif ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;\n\t\tif ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\tif ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;\n\t\tif ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n\n\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n\n\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\n\t\tif ( this.lightMap && this.lightMap.isTexture ) {\n\n\t\t\tdata.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t}\n\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\t\tif ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;\n\t\tif ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.combine !== undefined ) data.combine = this.combine;\n\n\t\t}\n\n\t\tif ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\n\t\tif ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;\n\t\tif ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;\n\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.transmission !== undefined ) data.transmission = this.transmission;\n\t\tif ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;\n\t\tif ( this.thickness !== undefined ) data.thickness = this.thickness;\n\t\tif ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;\n\t\tif ( this.attenuationDistance !== undefined ) data.attenuationDistance = this.attenuationDistance;\n\t\tif ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors ) data.vertexColors = true;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n\t\tdata.depthFunc = this.depthFunc;\n\t\tdata.depthTest = this.depthTest;\n\t\tdata.depthWrite = this.depthWrite;\n\t\tdata.colorWrite = this.colorWrite;\n\n\t\tdata.stencilWrite = this.stencilWrite;\n\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\tdata.stencilFunc = this.stencilFunc;\n\t\tdata.stencilRef = this.stencilRef;\n\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\tdata.stencilFail = this.stencilFail;\n\t\tdata.stencilZFail = this.stencilZFail;\n\t\tdata.stencilZPass = this.stencilZPass;\n\n\t\t// rotation (SpriteMaterial)\n\t\tif ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\tif ( this.polygonOffset === true ) data.polygonOffset = true;\n\t\tif ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\tif ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\n\t\tif ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.alphaToCoverage === true ) data.alphaToCoverage = this.alphaToCoverage;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\n\n\t\tif ( this.visible === false ) data.visible = false;\n\n\t\tif ( this.toneMapped === false ) data.toneMapped = false;\n\n\t\tif ( this.fog === false ) data.fog = false;\n\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\tthis.stencilFunc = source.stencilFunc;\n\t\tthis.stencilRef = source.stencilRef;\n\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\tthis.stencilFail = source.stencilFail;\n\t\tthis.stencilZFail = source.stencilZFail;\n\t\tthis.stencilZPass = source.stencilZPass;\n\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\tconst srcPlanes = source.clippingPlanes;\n\t\tlet dstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tconst n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\t\tthis.clipIntersection = source.clipIntersection;\n\t\tthis.clipShadows = source.clipShadows;\n\n\t\tthis.shadowSide = source.shadowSide;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.dithering = source.dithering;\n\n\t\tthis.alphaTest = source.alphaTest;\n\t\tthis.alphaToCoverage = source.alphaToCoverage;\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\tthis.visible = source.visible;\n\n\t\tthis.toneMapped = source.toneMapped;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n}\n\nMaterial.prototype.isMaterial = true;\n\nMaterial.fromType = function ( /*type*/ ) {\n\n\t// TODO: Behavior added in Materials.js\n\n\treturn null;\n\n};\n\nexport { Material };\n","import { Material } from './Material.js';\nimport { MultiplyOperation } from '../constants.js';\nimport { Color } from '../math/Color.js';\n\nclass MeshBasicMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\nexport { MeshBasicMaterial };\n","import { Vector3 } from './Vector3.js';\n\nconst _vector = /*@__PURE__*/ new Vector3();\nconst _segCenter = /*@__PURE__*/ new Vector3();\nconst _segDir = /*@__PURE__*/ new Vector3();\nconst _diff = /*@__PURE__*/ new Vector3();\n\nconst _edge1 = /*@__PURE__*/ new Vector3();\nconst _edge2 = /*@__PURE__*/ new Vector3();\nconst _normal = /*@__PURE__*/ new Vector3();\n\nclass Ray {\n\n\tconstructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {\n\n\t\tthis.origin = origin;\n\t\tthis.direction = direction;\n\n\t}\n\n\tset( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t}\n\n\tat( t, target ) {\n\n\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t}\n\n\tlookAt( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\trecast( t ) {\n\n\t\tthis.origin.copy( this.at( t, _vector ) );\n\n\t\treturn this;\n\n\t}\n\n\tclosestPointToPoint( point, target ) {\n\n\t\ttarget.subVectors( point, this.origin );\n\n\t\tconst directionDistance = target.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn target.copy( this.origin );\n\n\t\t}\n\n\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t}\n\n\tdistanceSqToPoint( point ) {\n\n\t\tconst directionDistance = _vector.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t// point behind the ray\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t}\n\n\t\t_vector.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\treturn _vector.distanceToSquared( point );\n\n\t}\n\n\tdistanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t// It returns the min distance between the ray and the segment\n\t\t// defined by v0 and v1\n\t\t// It can also set two optional targets :\n\t\t// - The closest point on the ray\n\t\t// - The closest point on the segment\n\n\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\tconst segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\tconst a01 = - this.direction.dot( _segDir );\n\t\tconst b0 = _diff.dot( this.direction );\n\t\tconst b1 = - _diff.dot( _segDir );\n\t\tconst c = _diff.lengthSq();\n\t\tconst det = Math.abs( 1 - a01 * a01 );\n\t\tlet s0, s1, sqrDist, extDet;\n\n\t\tif ( det > 0 ) {\n\n\t\t\t// The ray and segment are not parallel.\n\n\t\t\ts0 = a01 * b1 - b0;\n\t\t\ts1 = a01 * b0 - b1;\n\t\t\textDet = segExtent * det;\n\n\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\tconst invDet = 1 / det;\n\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 5\n\n\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t// region 4\n\n\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t// region 3\n\n\t\t\t\t\ts0 = 0;\n\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 2\n\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Ray and segment are parallel.\n\n\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t}\n\n\t\tif ( optionalPointOnRay ) {\n\n\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t}\n\n\t\tif ( optionalPointOnSegment ) {\n\n\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\n\n\t\t}\n\n\t\treturn sqrDist;\n\n\t}\n\n\tintersectSphere( sphere, target ) {\n\n\t\t_vector.subVectors( sphere.center, this.origin );\n\t\tconst tca = _vector.dot( this.direction );\n\t\tconst d2 = _vector.dot( _vector ) - tca * tca;\n\t\tconst radius2 = sphere.radius * sphere.radius;\n\n\t\tif ( d2 > radius2 ) return null;\n\n\t\tconst thc = Math.sqrt( radius2 - d2 );\n\n\t\t// t0 = first intersect point - entrance on front of sphere\n\t\tconst t0 = tca - thc;\n\n\t\t// t1 = second intersect point - exit point on back of sphere\n\t\tconst t1 = tca + thc;\n\n\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t// test to see if t0 is behind the ray:\n\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t// in order to always return an intersect point that is in front of the ray.\n\t\tif ( t0 < 0 ) return this.at( t1, target );\n\n\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\treturn this.at( t0, target );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tdistanceToPlane( plane ) {\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t : null;\n\n\t}\n\n\tintersectPlane( plane, target ) {\n\n\t\tconst t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, target );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tconst distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t}\n\n\tintersectBox( box, target ) {\n\n\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tconst invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tconst origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn this.intersectBox( box, _vector ) !== null;\n\n\t}\n\n\tintersectTriangle( a, b, c, backfaceCulling, target ) {\n\n\t\t// Compute the offset origin, edges, and normal.\n\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t_edge1.subVectors( b, a );\n\t\t_edge2.subVectors( c, a );\n\t\t_normal.crossVectors( _edge1, _edge2 );\n\n\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\tlet DdN = this.direction.dot( _normal );\n\t\tlet sign;\n\n\t\tif ( DdN > 0 ) {\n\n\t\t\tif ( backfaceCulling ) return null;\n\t\t\tsign = 1;\n\n\t\t} else if ( DdN < 0 ) {\n\n\t\t\tsign = - 1;\n\t\t\tDdN = - DdN;\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t_diff.subVectors( this.origin, a );\n\t\tconst DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t// b1 < 0, no intersection\n\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t// b2 < 0, no intersection\n\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// b1+b2 > 1, no intersection\n\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Line intersects triangle, check if ray does.\n\t\tconst QdN = - sign * _diff.dot( _normal );\n\n\t\t// t < 0, no intersection\n\t\tif ( QdN < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Ray intersects triangle.\n\t\treturn this.at( QdN / DdN, target );\n\n\t}\n\n\tapplyMatrix4( matrix4 ) {\n\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.transformDirection( matrix4 );\n\n\t\treturn this;\n\n\t}\n\n\tequals( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nexport { Ray };\n","import { Vector3 } from './Vector3.js';\n\nconst _v0 = /*@__PURE__*/ new Vector3();\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\nconst _v3 = /*@__PURE__*/ new Vector3();\n\nconst _vab = /*@__PURE__*/ new Vector3();\nconst _vac = /*@__PURE__*/ new Vector3();\nconst _vbc = /*@__PURE__*/ new Vector3();\nconst _vap = /*@__PURE__*/ new Vector3();\nconst _vbp = /*@__PURE__*/ new Vector3();\nconst _vcp = /*@__PURE__*/ new Vector3();\n\nclass Triangle {\n\n\tconstructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t}\n\n\tstatic getNormal( a, b, c, target ) {\n\n\t\ttarget.subVectors( c, b );\n\t\t_v0.subVectors( a, b );\n\t\ttarget.cross( _v0 );\n\n\t\tconst targetLengthSq = target.lengthSq();\n\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t}\n\n\t\treturn target.set( 0, 0, 0 );\n\n\t}\n\n\t// static/instance method to calculate barycentric coordinates\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\tstatic getBarycoord( point, a, b, c, target ) {\n\n\t\t_v0.subVectors( c, a );\n\t\t_v1.subVectors( b, a );\n\t\t_v2.subVectors( point, a );\n\n\t\tconst dot00 = _v0.dot( _v0 );\n\t\tconst dot01 = _v0.dot( _v1 );\n\t\tconst dot02 = _v0.dot( _v2 );\n\t\tconst dot11 = _v1.dot( _v1 );\n\t\tconst dot12 = _v1.dot( _v2 );\n\n\t\tconst denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\t// arbitrary location outside of triangle?\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t}\n\n\t\tconst invDenom = 1 / denom;\n\t\tconst u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tconst v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn target.set( 1 - u - v, v, u );\n\n\t}\n\n\tstatic containsPoint( point, a, b, c ) {\n\n\t\tthis.getBarycoord( point, a, b, c, _v3 );\n\n\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\n\n\t}\n\n\tstatic getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) {\n\n\t\tthis.getBarycoord( point, p1, p2, p3, _v3 );\n\n\t\ttarget.set( 0, 0 );\n\t\ttarget.addScaledVector( uv1, _v3.x );\n\t\ttarget.addScaledVector( uv2, _v3.y );\n\t\ttarget.addScaledVector( uv3, _v3.z );\n\n\t\treturn target;\n\n\t}\n\n\tstatic isFrontFacing( a, b, c, direction ) {\n\n\t\t_v0.subVectors( c, b );\n\t\t_v1.subVectors( a, b );\n\n\t\t// strictly front facing\n\t\treturn ( _v0.cross( _v1 ).dot( direction ) < 0 ) ? true : false;\n\n\t}\n\n\tset( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPointsAndIndices( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAttributeAndIndices( attribute, i0, i1, i2 ) {\n\n\t\tthis.a.fromBufferAttribute( attribute, i0 );\n\t\tthis.b.fromBufferAttribute( attribute, i1 );\n\t\tthis.c.fromBufferAttribute( attribute, i2 );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t}\n\n\tgetArea() {\n\n\t\t_v0.subVectors( this.c, this.b );\n\t\t_v1.subVectors( this.a, this.b );\n\n\t\treturn _v0.cross( _v1 ).length() * 0.5;\n\n\t}\n\n\tgetMidpoint( target ) {\n\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t}\n\n\tgetNormal( target ) {\n\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t}\n\n\tgetPlane( target ) {\n\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t}\n\n\tgetBarycoord( point, target ) {\n\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t}\n\n\tgetUV( point, uv1, uv2, uv3, target ) {\n\n\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t}\n\n\tisFrontFacing( direction ) {\n\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsTriangle( this );\n\n\t}\n\n\tclosestPointToPoint( p, target ) {\n\n\t\tconst a = this.a, b = this.b, c = this.c;\n\t\tlet v, w;\n\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t_vab.subVectors( b, a );\n\t\t_vac.subVectors( c, a );\n\t\t_vap.subVectors( p, a );\n\t\tconst d1 = _vab.dot( _vap );\n\t\tconst d2 = _vac.dot( _vap );\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\treturn target.copy( a );\n\n\t\t}\n\n\t\t_vbp.subVectors( p, b );\n\t\tconst d3 = _vab.dot( _vbp );\n\t\tconst d4 = _vac.dot( _vbp );\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\treturn target.copy( b );\n\n\t\t}\n\n\t\tconst vc = d1 * d4 - d3 * d2;\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t}\n\n\t\t_vcp.subVectors( p, c );\n\t\tconst d5 = _vab.dot( _vcp );\n\t\tconst d6 = _vac.dot( _vcp );\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\treturn target.copy( c );\n\n\t\t}\n\n\t\tconst vb = d5 * d2 - d1 * d6;\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t}\n\n\t\tconst va = d3 * d6 - d5 * d4;\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t_vbc.subVectors( c, b );\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t}\n\n\t\t// face region\n\t\tconst denom = 1 / ( va + vb + vc );\n\t\t// u = va * denom\n\t\tv = vb * denom;\n\t\tw = vc * denom;\n\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t}\n\n\tequals( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n}\n\nexport { Triangle };\n","import { Vector3 } from '../math/Vector3.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Sphere } from '../math/Sphere.js';\nimport { Ray } from '../math/Ray.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { Triangle } from '../math/Triangle.js';\nimport { DoubleSide, BackSide } from '../constants.js';\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\n\nconst _inverseMatrix = /*@__PURE__*/ new Matrix4();\nconst _ray = /*@__PURE__*/ new Ray();\nconst _sphere = /*@__PURE__*/ new Sphere();\n\nconst _vA = /*@__PURE__*/ new Vector3();\nconst _vB = /*@__PURE__*/ new Vector3();\nconst _vC = /*@__PURE__*/ new Vector3();\n\nconst _tempA = /*@__PURE__*/ new Vector3();\nconst _tempB = /*@__PURE__*/ new Vector3();\nconst _tempC = /*@__PURE__*/ new Vector3();\n\nconst _morphA = /*@__PURE__*/ new Vector3();\nconst _morphB = /*@__PURE__*/ new Vector3();\nconst _morphC = /*@__PURE__*/ new Vector3();\n\nconst _uvA = /*@__PURE__*/ new Vector2();\nconst _uvB = /*@__PURE__*/ new Vector2();\nconst _uvC = /*@__PURE__*/ new Vector2();\n\nconst _intersectionPoint = /*@__PURE__*/ new Vector3();\nconst _intersectionPointWorld = /*@__PURE__*/ new Vector3();\n\nclass Mesh extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t}\n\n\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t}\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\tconst keys = Object.keys( morphAttributes );\n\n\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere );\n\t\t_sphere.applyMatrix4( matrixWorld );\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix.copy( matrixWorld ).invert();\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\t// Check boundingBox before continuing\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\tlet intersection;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst index = geometry.index;\n\t\t\tconst position = geometry.attributes.position;\n\t\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\tconst uv = geometry.attributes.uv;\n\t\t\tconst uv2 = geometry.attributes.uv2;\n\t\t\tconst groups = geometry.groups;\n\t\t\tconst drawRange = geometry.drawRange;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\t// indexed buffer geometry\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\tconst end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\tconst a = index.getX( j );\n\t\t\t\t\t\t\tconst b = index.getX( j + 1 );\n\t\t\t\t\t\t\tconst c = index.getX( j + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\tconst a = index.getX( i );\n\t\t\t\t\t\tconst b = index.getX( i + 1 );\n\t\t\t\t\t\tconst c = index.getX( i + 2 );\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\tconst end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\t\tconst c = j + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\t\tconst end = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\tconst a = i;\n\t\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\t\tconst c = i + 2;\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t}\n\n}\n\nMesh.prototype.isMesh = true;\n\nfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\tlet intersect;\n\n\tif ( material.side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\t_intersectionPointWorld.copy( point );\n\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\treturn {\n\t\tdistance: distance,\n\t\tpoint: _intersectionPointWorld.clone(),\n\t\tobject: object\n\t};\n\n}\n\nfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\n\n\t_vA.fromBufferAttribute( position, a );\n\t_vB.fromBufferAttribute( position, b );\n\t_vC.fromBufferAttribute( position, c );\n\n\tconst morphInfluences = object.morphTargetInfluences;\n\n\tif ( morphPosition && morphInfluences ) {\n\n\t\t_morphA.set( 0, 0, 0 );\n\t\t_morphB.set( 0, 0, 0 );\n\t\t_morphC.set( 0, 0, 0 );\n\n\t\tfor ( let i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\tconst influence = morphInfluences[ i ];\n\t\t\tconst morphAttribute = morphPosition[ i ];\n\n\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\n\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\n\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\n\n\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t} else {\n\n\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_vA.add( _morphA );\n\t\t_vB.add( _morphB );\n\t\t_vC.add( _morphC );\n\n\t}\n\n\tif ( object.isSkinnedMesh ) {\n\n\t\tobject.boneTransform( a, _vA );\n\t\tobject.boneTransform( b, _vB );\n\t\tobject.boneTransform( c, _vC );\n\n\t}\n\n\tconst intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\n\n\tif ( intersection ) {\n\n\t\tif ( uv ) {\n\n\t\t\t_uvA.fromBufferAttribute( uv, a );\n\t\t\t_uvB.fromBufferAttribute( uv, b );\n\t\t\t_uvC.fromBufferAttribute( uv, c );\n\n\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t}\n\n\t\tif ( uv2 ) {\n\n\t\t\t_uvA.fromBufferAttribute( uv2, a );\n\t\t\t_uvB.fromBufferAttribute( uv2, b );\n\t\t\t_uvC.fromBufferAttribute( uv2, c );\n\n\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t}\n\n\t\tconst face = {\n\t\t\ta: a,\n\t\t\tb: b,\n\t\t\tc: c,\n\t\t\tnormal: new Vector3(),\n\t\t\tmaterialIndex: 0\n\t\t};\n\n\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\n\n\t\tintersection.face = face;\n\n\t}\n\n\treturn intersection;\n\n}\n\nexport { Mesh };\n"],"names":["materialId","Material","constructor","super","Object","defineProperty","this","value","uuid","name","type","blending","side","vertexColors","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaToCoverage","premultipliedAlpha","visible","toneMapped","userData","version","_alphaTest","alphaTest","onBuild","onBeforeRender","onBeforeCompile","customProgramCacheKey","toString","setValues","values","undefined","key","newValue","console","warn","flatShading","currentValue","isColor","set","isVector3","copy","toJSON","meta","isRootObject","textures","images","data","metadata","generator","extractFromCache","cache","push","color","getHex","roughness","metalness","sheen","sheenColor","sheenRoughness","emissive","emissiveIntensity","specular","specularIntensity","specularColor","shininess","clearcoat","clearcoatRoughness","clearcoatMap","isTexture","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","toArray","map","matcap","alphaMap","lightMap","lightMapIntensity","aoMap","aoMapIntensity","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","specularMap","specularIntensityMap","specularColorMap","envMap","combine","envMapIntensity","reflectivity","refractionRatio","gradientMap","transmission","transmissionMap","thickness","thicknessMap","attenuationDistance","attenuationColor","size","sizeAttenuation","rotation","linewidth","dashSize","gapSize","scale","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","fog","JSON","stringify","length","clone","source","srcPlanes","dstPlanes","n","Array","i","parse","dispose","dispatchEvent","needsUpdate","prototype","isMaterial","fromType","MeshBasicMaterial","parameters","Color","isMeshBasicMaterial","_vector","Vector3","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","Ray","origin","direction","ray","at","t","target","multiplyScalar","add","lookAt","v","sub","normalize","recast","closestPointToPoint","point","subVectors","directionDistance","dot","distanceToPoint","Math","sqrt","distanceSqToPoint","distanceToSquared","distanceSqToSegment","v0","v1","optionalPointOnRay","optionalPointOnSegment","segExtent","distanceTo","a01","b0","b1","c","lengthSq","det","abs","s0","s1","sqrDist","extDet","invDet","max","min","intersectSphere","sphere","center","tca","d2","radius2","radius","thc","t0","t1","intersectsSphere","distanceToPlane","plane","denominator","normal","constant","intersectPlane","intersectsPlane","distToPoint","intersectBox","box","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","x","invdiry","y","invdirz","z","intersectsBox","intersectTriangle","a","b","backfaceCulling","crossVectors","sign","DdN","DdQxE2","DdE1xQ","cross","QdN","applyMatrix4","matrix4","transformDirection","equals","_v0","_v1","_v2","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","static","targetLengthSq","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","getBarycoord","p1","p2","p3","uv1","uv2","uv3","addScaledVector","setFromPointsAndIndices","points","i0","i1","i2","setFromAttributeAndIndices","attribute","fromBufferAttribute","triangle","getArea","getMidpoint","addVectors","getNormal","getPlane","setFromCoplanarPoints","getUV","containsPoint","isFrontFacing","intersectsTriangle","p","w","d1","d3","d4","vc","d5","d6","vb","va","_inverseMatrix","Matrix4","_ray","_sphere","Sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","Vector2","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","Mesh","Object3D","geometry","BufferGeometry","material","updateMorphTargets","morphTargetInfluences","slice","morphTargetDictionary","assign","isBufferGeometry","morphAttributes","keys","morphAttribute","m","ml","String","morphTargets","error","raycast","raycaster","intersects","matrixWorld","boundingSphere","computeBoundingSphere","invert","boundingBox","intersection","index","position","attributes","morphPosition","morphTargetsRelative","uv","groups","drawRange","isArray","il","group","groupMaterial","materialIndex","j","start","jl","count","getX","checkBufferGeometryIntersection","faceIndex","floor","face","isGeometry","object","morphInfluences","influence","isSkinnedMesh","boneTransform","pA","pB","pC","intersect","distance","near","far","checkIntersection","isMesh"],"sourceRoot":""}