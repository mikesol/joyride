{"version":3,"file":"59.bundle.js","mappings":"kKAEA,MAAMA,UAAiC,EAAAC,gBAEtCC,YAAaC,EAAOC,EAAUC,EAAYC,EAAmB,GAEjC,iBAAfD,IAEXC,EAAmBD,EAEnBA,GAAa,EAEbE,QAAQC,MAAO,kGAIhBC,MAAON,EAAOC,EAAUC,GAExBK,KAAKJ,iBAAmBA,EAIzBK,KAAMC,GAML,OAJAH,MAAME,KAAMC,GAEZF,KAAKJ,iBAAmBM,EAAON,iBAExBI,KAIRG,SAEC,MAAMC,EAAOL,MAAMI,SAMnB,OAJAC,EAAKR,iBAAmBI,KAAKJ,iBAE7BQ,EAAKC,4BAA6B,EAE3BD,GAMTd,EAAyBgB,UAAUD,4BAA6B,G,mFC1ChE,MAAME,EAAqC,IAAI,EAAAC,QACzCC,EAAqC,IAAI,EAAAD,QAEzCE,EAAsB,GAEtBC,EAAsB,IAAI,EAAAC,KAEhC,MAAMC,UAAsB,EAAAD,KAE3BpB,YAAasB,EAAUC,EAAUC,GAEhCjB,MAAOe,EAAUC,GAEjBf,KAAKiB,eAAiB,IAAI,EAAA3B,yBAA0B,IAAI4B,aAAsB,GAARF,GAAc,IACpFhB,KAAKmB,cAAgB,KAErBnB,KAAKgB,MAAQA,EAEbhB,KAAKoB,eAAgB,EAItBnB,KAAMC,GAUL,OARAH,MAAME,KAAMC,GAEZF,KAAKiB,eAAehB,KAAMC,EAAOe,gBAEH,OAAzBf,EAAOiB,gBAAyBnB,KAAKmB,cAAgBjB,EAAOiB,cAAcE,SAE/ErB,KAAKgB,MAAQd,EAAOc,MAEbhB,KAIRsB,WAAYC,EAAOC,GAElBA,EAAMC,UAAWzB,KAAKmB,cAAc1B,MAAe,EAAR8B,GAI5CG,YAAaH,EAAOI,GAEnBA,EAAOF,UAAWzB,KAAKiB,eAAexB,MAAe,GAAR8B,GAI9CK,QAASC,EAAWC,GAEnB,MAAMC,EAAc/B,KAAK+B,YACnBC,EAAehC,KAAKgB,MAK1B,GAHAL,EAAMG,SAAWd,KAAKc,SACtBH,EAAMI,SAAWf,KAAKe,cAEEkB,IAAnBtB,EAAMI,SAEX,IAAM,IAAImB,EAAa,EAAGA,EAAaF,EAAcE,IAAgB,CAIpElC,KAAK0B,YAAaQ,EAAY3B,GAE9BE,EAAqB0B,iBAAkBJ,EAAaxB,GAIpDI,EAAMoB,YAActB,EAEpBE,EAAMiB,QAASC,EAAWnB,GAI1B,IAAM,IAAI0B,EAAI,EAAGC,EAAI3B,EAAoB4B,OAAQF,EAAIC,EAAGD,IAAO,CAE9D,MAAMG,EAAY7B,EAAqB0B,GACvCG,EAAUL,WAAaA,EACvBK,EAAUC,OAASxC,KACnB8B,EAAWW,KAAMF,GAIlB7B,EAAoB4B,OAAS,GAM/BI,WAAYnB,EAAOC,GAEU,OAAvBxB,KAAKmB,gBAETnB,KAAKmB,cAAgB,IAAI,EAAA7B,yBAA0B,IAAI4B,aAA0C,EAA5BlB,KAAKiB,eAAeD,OAAa,IAIvGQ,EAAMmB,QAAS3C,KAAKmB,cAAc1B,MAAe,EAAR8B,GAI1CqB,YAAarB,EAAOI,GAEnBA,EAAOgB,QAAS3C,KAAKiB,eAAexB,MAAe,GAAR8B,GAI5CsB,sBAIAC,UAEC9C,KAAK+C,cAAe,CAAEC,KAAM,aAM9BnC,EAAcP,UAAU2C,iBAAkB","sources":["webpack://joyride/./node_modules/three/src/core/InstancedBufferAttribute.js","webpack://joyride/./node_modules/three/src/objects/InstancedMesh.js"],"sourcesContent":["import { BufferAttribute } from './BufferAttribute.js';\n\nclass InstancedBufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized, meshPerAttribute = 1 ) {\n\n\t\tif ( typeof normalized === 'number' ) {\n\n\t\t\tmeshPerAttribute = normalized;\n\n\t\t\tnormalized = false;\n\n\t\t\tconsole.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );\n\n\t\t}\n\n\t\tsuper( array, itemSize, normalized );\n\n\t\tthis.meshPerAttribute = meshPerAttribute;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\tdata.isInstancedBufferAttribute = true;\n\n\t\treturn data;\n\n\t}\n\n}\n\nInstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\nexport { InstancedBufferAttribute };\n","import { InstancedBufferAttribute } from '../core/InstancedBufferAttribute.js';\nimport { Mesh } from './Mesh.js';\nimport { Matrix4 } from '../math/Matrix4.js';\n\nconst _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();\nconst _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _instanceIntersects = [];\n\nconst _mesh = /*@__PURE__*/ new Mesh();\n\nclass InstancedMesh extends Mesh {\n\n\tconstructor( geometry, material, count ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.instanceMatrix = new InstancedBufferAttribute( new Float32Array( count * 16 ), 16 );\n\t\tthis.instanceColor = null;\n\n\t\tthis.count = count;\n\n\t\tthis.frustumCulled = false;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.instanceMatrix.copy( source.instanceMatrix );\n\n\t\tif ( source.instanceColor !== null ) this.instanceColor = source.instanceColor.clone();\n\n\t\tthis.count = source.count;\n\n\t\treturn this;\n\n\t}\n\n\tgetColorAt( index, color ) {\n\n\t\tcolor.fromArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\tgetMatrixAt( index, matrix ) {\n\n\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst raycastTimes = this.count;\n\n\t\t_mesh.geometry = this.geometry;\n\t\t_mesh.material = this.material;\n\n\t\tif ( _mesh.material === undefined ) return;\n\n\t\tfor ( let instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t// calculate the world matrix for each instance\n\n\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t// the mesh represents this single instance\n\n\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\n\n\t\t\t// process the result of raycast\n\n\t\t\tfor ( let i = 0, l = _instanceIntersects.length; i < l; i ++ ) {\n\n\t\t\t\tconst intersect = _instanceIntersects[ i ];\n\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\tintersect.object = this;\n\t\t\t\tintersects.push( intersect );\n\n\t\t\t}\n\n\t\t\t_instanceIntersects.length = 0;\n\n\t\t}\n\n\t}\n\n\tsetColorAt( index, color ) {\n\n\t\tif ( this.instanceColor === null ) {\n\n\t\t\tthis.instanceColor = new InstancedBufferAttribute( new Float32Array( this.instanceMatrix.count * 3 ), 3 );\n\n\t\t}\n\n\t\tcolor.toArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\tsetMatrixAt( index, matrix ) {\n\n\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nInstancedMesh.prototype.isInstancedMesh = true;\n\nexport { InstancedMesh };\n"],"names":["InstancedBufferAttribute","BufferAttribute","constructor","array","itemSize","normalized","meshPerAttribute","console","error","super","this","copy","source","toJSON","data","isInstancedBufferAttribute","prototype","_instanceLocalMatrix","Matrix4","_instanceWorldMatrix","_instanceIntersects","_mesh","Mesh","InstancedMesh","geometry","material","count","instanceMatrix","Float32Array","instanceColor","frustumCulled","clone","getColorAt","index","color","fromArray","getMatrixAt","matrix","raycast","raycaster","intersects","matrixWorld","raycastTimes","undefined","instanceId","multiplyMatrices","i","l","length","intersect","object","push","setColorAt","toArray","setMatrixAt","updateMorphTargets","dispose","dispatchEvent","type","isInstancedMesh"],"sourceRoot":""}