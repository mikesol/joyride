{"version":3,"file":"1266.bundle.js","mappings":"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","sources":["webpack://joyride/./node_modules/three/src/cameras/Camera.js","webpack://joyride/./node_modules/three/src/lights/Light.js","webpack://joyride/./node_modules/three/src/lights/LightShadow.js","webpack://joyride/./node_modules/three/src/math/Box3.js","webpack://joyride/./node_modules/three/src/math/Frustum.js","webpack://joyride/./node_modules/three/src/math/Plane.js","webpack://joyride/./node_modules/three/src/math/Sphere.js","webpack://joyride/./node_modules/three/src/math/Vector2.js","webpack://joyride/./node_modules/three/src/math/Vector4.js"],"sourcesContent":["import { Matrix4 } from '../math/Matrix4.js';\nimport { Object3D } from '../core/Object3D.js';\n\nclass Camera extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\treturn this;\n\n\t}\n\n\tgetWorldDirection( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tsuper.updateWorldMatrix( updateParents, updateChildren );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nCamera.prototype.isCamera = true;\n\nexport { Camera };\n","import { Object3D } from '../core/Object3D.js';\nimport { Color } from '../math/Color.js';\n\nclass Light extends Object3D {\n\n\tconstructor( color, intensity = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity;\n\n\t}\n\n\tdispose() {\n\n\t\t// Empty here in base class; some subclasses override.\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.color = this.color.getHex();\n\t\tdata.object.intensity = this.intensity;\n\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n\t\treturn data;\n\n\t}\n\n}\n\nLight.prototype.isLight = true;\n\nexport { Light };\n","import { Matrix4 } from '../math/Matrix4.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Vector4 } from '../math/Vector4.js';\nimport { Frustum } from '../math/Frustum.js';\n\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld = /*@__PURE__*/ new Vector3();\nconst _lookTarget = /*@__PURE__*/ new Vector3();\n\nclass LightShadow {\n\n\tconstructor( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.normalBias = 0;\n\t\tthis.radius = 1;\n\t\tthis.blurSamples = 8;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\tgetViewportCount() {\n\n\t\treturn this._viewportCount;\n\n\t}\n\n\tgetFrustum() {\n\n\t\treturn this._frustum;\n\n\t}\n\n\tupdateMatrices( light ) {\n\n\t\tconst shadowCamera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\tshadowCamera.lookAt( _lookTarget );\n\t\tshadowCamera.updateMatrixWorld();\n\n\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\tshadowMatrix.set(\n\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t);\n\n\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t}\n\n\tgetViewport( viewportIndex ) {\n\n\t\treturn this._viewports[ viewportIndex ];\n\n\t}\n\n\tgetFrameExtents() {\n\n\t\treturn this._frameExtents;\n\n\t}\n\n\tdispose() {\n\n\t\tif ( this.map ) {\n\n\t\t\tthis.map.dispose();\n\n\t\t}\n\n\t\tif ( this.mapPass ) {\n\n\t\t\tthis.mapPass.dispose();\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.camera = source.camera.clone();\n\n\t\tthis.bias = source.bias;\n\t\tthis.radius = source.radius;\n\n\t\tthis.mapSize.copy( source.mapSize );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst object = {};\n\n\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\tif ( this.normalBias !== 0 ) object.normalBias = this.normalBias;\n\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\tdelete object.camera.matrix;\n\n\t\treturn object;\n\n\t}\n\n}\n\nexport { LightShadow };\n","import { Vector3 } from './Vector3.js';\n\nclass Box3 {\n\n\tconstructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromArray( array ) {\n\n\t\tlet minX = + Infinity;\n\t\tlet minY = + Infinity;\n\t\tlet minZ = + Infinity;\n\n\t\tlet maxX = - Infinity;\n\t\tlet maxY = - Infinity;\n\t\tlet maxZ = - Infinity;\n\n\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tconst x = array[ i ];\n\t\t\tconst y = array[ i + 1 ];\n\t\t\tconst z = array[ i + 2 ];\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromBufferAttribute( attribute ) {\n\n\t\tlet minX = + Infinity;\n\t\tlet minY = + Infinity;\n\t\tlet minZ = + Infinity;\n\n\t\tlet maxX = - Infinity;\n\t\tlet maxY = - Infinity;\n\t\tlet maxZ = - Infinity;\n\n\t\tfor ( let i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\tconst x = attribute.getX( i );\n\t\t\tconst y = attribute.getY( i );\n\t\t\tconst z = attribute.getZ( i );\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector.copy( size ).multiplyScalar( 0.5 );\n\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromObject( object, precise = false ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object, precise );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\texpandByObject( object, precise = false ) {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tobject.updateWorldMatrix( false, false );\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry !== undefined ) {\n\n\t\t\tif ( precise && geometry.attributes != undefined && geometry.attributes.position !== undefined ) {\n\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tfor ( let i = 0, l = position.count; i < l; i ++ ) {\n\n\t\t\t\t\t_vector.fromBufferAttribute( position, i ).applyMatrix4( object.matrixWorld );\n\t\t\t\t\tthis.expandByPoint( _vector );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t}\n\n\t\t\t\t_box.copy( geometry.boundingBox );\n\t\t\t\t_box.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tthis.union( _box );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis.expandByObject( children[ i ], precise );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\t// Find the point on the AABB closest to the sphere center.\n\t\tthis.clampPoint( sphere.center, _vector );\n\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\treturn _vector.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tlet min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t}\n\n\tintersectsTriangle( triangle ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// compute box center and extents\n\t\tthis.getCenter( _center );\n\t\t_extents.subVectors( this.max, _center );\n\n\t\t// translate triangle to aabb origin\n\t\t_v0.subVectors( triangle.a, _center );\n\t\t_v1.subVectors( triangle.b, _center );\n\t\t_v2.subVectors( triangle.c, _center );\n\n\t\t// compute edge vectors for triangle\n\t\t_f0.subVectors( _v1, _v0 );\n\t\t_f1.subVectors( _v2, _v1 );\n\t\t_f2.subVectors( _v0, _v2 );\n\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\tlet axes = [\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t];\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// test 3 face normals from the aabb\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// finally testing the face normal of the triangle\n\t\t// use already existing triangle edge vectors here\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\treturn satForAxes( axes, _v0, _v1, _v2, _extents );\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\tconst clampedPoint = _vector.copy( point ).clamp( this.min, this.max );\n\n\t\treturn clampedPoint.sub( point ).length();\n\n\t}\n\n\tgetBoundingSphere( target ) {\n\n\t\tthis.getCenter( target.center );\n\n\t\ttarget.radius = this.getSize( _vector ).length() * 0.5;\n\n\t\treturn target;\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\t// transform of empty box is an empty box.\n\t\tif ( this.isEmpty() ) return this;\n\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\tthis.setFromPoints( _points );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nBox3.prototype.isBox3 = true;\n\nconst _points = [\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3()\n];\n\nconst _vector = /*@__PURE__*/ new Vector3();\n\nconst _box = /*@__PURE__*/ new Box3();\n\n// triangle centered vertices\n\nconst _v0 = /*@__PURE__*/ new Vector3();\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\n\n// triangle edge vectors\n\nconst _f0 = /*@__PURE__*/ new Vector3();\nconst _f1 = /*@__PURE__*/ new Vector3();\nconst _f2 = /*@__PURE__*/ new Vector3();\n\nconst _center = /*@__PURE__*/ new Vector3();\nconst _extents = /*@__PURE__*/ new Vector3();\nconst _triangleNormal = /*@__PURE__*/ new Vector3();\nconst _testAxis = /*@__PURE__*/ new Vector3();\n\nfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\tfor ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t_testAxis.fromArray( axes, i );\n\t\t// project the aabb onto the separating axis\n\t\tconst r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t// project all 3 vertices of the triangle onto the separating axis\n\t\tconst p0 = v0.dot( _testAxis );\n\t\tconst p1 = v1.dot( _testAxis );\n\t\tconst p2 = v2.dot( _testAxis );\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t// the axis is separating and we can exit\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nexport { Box3 };\n","import { Vector3 } from './Vector3.js';\nimport { Sphere } from './Sphere.js';\nimport { Plane } from './Plane.js';\n\nconst _sphere = /*@__PURE__*/ new Sphere();\nconst _vector = /*@__PURE__*/ new Vector3();\n\nclass Frustum {\n\n\tconstructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {\n\n\t\tthis.planes = [ p0, p1, p2, p3, p4, p5 ];\n\n\t}\n\n\tset( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tconst planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( frustum ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromProjectionMatrix( m ) {\n\n\t\tconst planes = this.planes;\n\t\tconst me = m.elements;\n\t\tconst me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tconst me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tconst me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tconst me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\tintersectsObject( object ) {\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere );\n\n\t}\n\n\tintersectsSprite( sprite ) {\n\n\t\t_sphere.center.set( 0, 0, 0 );\n\t\t_sphere.radius = 0.7071067811865476;\n\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst planes = this.planes;\n\t\tconst center = sphere.center;\n\t\tconst negRadius = - sphere.radius;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst plane = planes[ i ];\n\n\t\t\t// corner at max distance\n\n\t\t\t_vector.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t_vector.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t_vector.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\tif ( plane.distanceToPoint( _vector ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\n\nexport { Frustum };\n","import { Matrix3 } from './Matrix3.js';\nimport { Vector3 } from './Vector3.js';\n\nconst _vector1 = /*@__PURE__*/ new Vector3();\nconst _vector2 = /*@__PURE__*/ new Vector3();\nconst _normalMatrix = /*@__PURE__*/ new Matrix3();\n\nclass Plane {\n\n\tconstructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = normal;\n\t\tthis.constant = constant;\n\n\t}\n\n\tset( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponents( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromNormalAndCoplanarPoint( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCoplanarPoints( a, b, c ) {\n\n\t\tconst normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t}\n\n\tnormalize() {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tconst inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.constant *= - 1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t}\n\n\tdistanceToSphere( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t}\n\n\tprojectPoint( point, target ) {\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t}\n\n\tintersectLine( line, target ) {\n\n\t\tconst direction = line.delta( _vector1 );\n\n\t\tconst denominator = this.normal.dot( direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\treturn target.copy( line.start );\n\n\t\t\t}\n\n\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t}\n\n\tintersectsLine( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tconst startSign = this.distanceToPoint( line.start );\n\t\tconst endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t}\n\n\tcoplanarPoint( target ) {\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t}\n\n\tapplyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\tconst referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\tconst normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.constant -= offset.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\tequals( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nPlane.prototype.isPlane = true;\n\nexport { Plane };\n","import { Box3 } from './Box3.js';\nimport { Vector3 } from './Vector3.js';\n\nconst _box = /*@__PURE__*/ new Box3();\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _toFarthestPoint = /*@__PURE__*/ new Vector3();\nconst _toPoint = /*@__PURE__*/ new Vector3();\n\nclass Sphere {\n\n\tconstructor( center = new Vector3(), radius = - 1 ) {\n\n\t\tthis.center = center;\n\t\tthis.radius = radius;\n\n\t}\n\n\tset( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points, optionalCenter ) {\n\n\t\tconst center = this.center;\n\n\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\tcenter.copy( optionalCenter );\n\n\t\t} else {\n\n\t\t\t_box.setFromPoints( points ).getCenter( center );\n\n\t\t}\n\n\t\tlet maxRadiusSq = 0;\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t}\n\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\treturn ( this.radius < 0 );\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.center.set( 0, 0, 0 );\n\t\tthis.radius = - 1;\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\tconst deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\ttarget.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\ttarget.sub( this.center ).normalize();\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tgetBoundingBox( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\t// Empty sphere produces empty bounding box\n\t\t\ttarget.makeEmpty();\n\t\t\treturn target;\n\n\t\t}\n\n\t\ttarget.set( this.center, this.center );\n\t\ttarget.expandByScalar( this.radius );\n\n\t\treturn target;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671\n\n\t\t_toPoint.subVectors( point, this.center );\n\n\t\tconst lengthSq = _toPoint.lengthSq();\n\n\t\tif ( lengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\tconst length = Math.sqrt( lengthSq );\n\t\t\tconst missingRadiusHalf = ( length - this.radius ) * 0.5;\n\n\t\t\t// Nudge this sphere towards the target point. Add half the missing distance to radius,\n\t\t\t// and the other half to position. This gives a tighter enclosure, instead of if\n\t\t\t// the whole missing distance were just added to radius.\n\n\t\t\tthis.center.add( _toPoint.multiplyScalar( missingRadiusHalf / length ) );\n\t\t\tthis.radius += missingRadiusHalf;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tunion( sphere ) {\n\n\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769\n\n\t\t// To enclose another sphere into this sphere, we only need to enclose two points:\n\t\t// 1) Enclose the farthest point on the other sphere into this sphere.\n\t\t// 2) Enclose the opposite point of the farthest point into this sphere.\n\n\t\t if ( this.center.equals( sphere.center ) === true ) {\n\n\t\t\t _toFarthestPoint.set( 0, 0, 1 ).multiplyScalar( sphere.radius );\n\n\n\t\t} else {\n\n\t\t\t_toFarthestPoint.subVectors( sphere.center, this.center ).normalize().multiplyScalar( sphere.radius );\n\n\t\t}\n\n\t\tthis.expandByPoint( _v1.copy( sphere.center ).add( _toFarthestPoint ) );\n\t\tthis.expandByPoint( _v1.copy( sphere.center ).sub( _toFarthestPoint ) );\n\n\t\treturn this;\n\n\t}\n\n\tequals( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nexport { Sphere };\n","class Vector2 {\n\n\tconstructor( x = 0, y = 0 ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t}\n\n\tget width() {\n\n\t\treturn this.x;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.x = value;\n\n\t}\n\n\tget height() {\n\n\t\treturn this.y;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.y = value;\n\n\t}\n\n\tset( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\treturn this;\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t}\n\n\tcross( v ) {\n\n\t\treturn this.x * v.y - this.y * v.x;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tangle() {\n\n\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\tconst angle = Math.atan2( - this.y, - this.x ) + Math.PI;\n\n\t\treturn angle;\n\n\t}\n\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t}\n\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\n\t\treturn this;\n\n\t}\n\n\trotateAround( center, angle ) {\n\n\t\tconst c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tconst x = this.x - center.x;\n\t\tconst y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\n\t}\n\n}\n\nVector2.prototype.isVector2 = true;\n\nexport { Vector2 };\n","class Vector4 {\n\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t}\n\n\tget width() {\n\n\t\treturn this.z;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.z = value;\n\n\t}\n\n\tget height() {\n\n\t\treturn this.w;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.w = value;\n\n\t}\n\n\tset( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetW( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\t\tthis.w *= v.w;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\tthis.w *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tsetAxisAngleFromQuaternion( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tconst s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\tthis.x = 1;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t} else {\n\n\t\t\tthis.x = q.x / s;\n\t\t\tthis.y = q.y / s;\n\t\t\tthis.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetAxisAngleFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tlet angle, x, y, z; // variables for result\n\t\tconst epsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tconst xx = ( m11 + 1 ) / 2;\n\t\t\tconst yy = ( m22 + 1 ) / 2;\n\t\t\tconst zz = ( m33 + 1 ) / 2;\n\t\t\tconst xy = ( m12 + m21 ) / 4;\n\t\t\tconst xz = ( m13 + m31 ) / 4;\n\t\t\tconst yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tlet s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\t\tthis.w = v1.w + ( v2.w - v1.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\t\tthis.w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\t\tthis.w = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\t\tyield this.w;\n\n\t}\n\n}\n\nVector4.prototype.isVector4 = true;\n\nexport { Vector4 };\n"],"names":["Camera","constructor","super","this","type","matrixWorldInverse","Matrix4","projectionMatrix","projectionMatrixInverse","copy","source","recursive","getWorldDirection","target","updateWorldMatrix","e","matrixWorld","elements","set","normalize","updateMatrixWorld","force","invert","updateParents","updateChildren","clone","prototype","isCamera","Light","color","intensity","Color","dispose","toJSON","meta","data","object","getHex","undefined","groundColor","distance","angle","decay","penumbra","shadow","isLight","_projScreenMatrix","_lightPositionWorld","Vector3","_lookTarget","LightShadow","camera","bias","normalBias","radius","blurSamples","mapSize","Vector2","map","mapPass","matrix","autoUpdate","needsUpdate","_frustum","_frameExtents","_viewportCount","_viewports","getViewportCount","getFrustum","updateMatrices","light","shadowCamera","shadowMatrix","setFromMatrixPosition","position","lookAt","multiplyMatrices","setFromProjectionMatrix","multiply","getViewport","viewportIndex","getFrameExtents","x","y","toArray","Box3","min","max","setFromArray","array","minX","minY","minZ","maxX","maxY","maxZ","i","l","length","z","setFromBufferAttribute","attribute","count","getX","getY","getZ","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","center","size","halfSize","_vector","multiplyScalar","sub","add","setFromObject","precise","expandByObject","box","isEmpty","getCenter","addVectors","getSize","subVectors","point","expandByVector","vector","expandByScalar","scalar","addScalar","geometry","attributes","fromBufferAttribute","applyMatrix4","boundingBox","computeBoundingBox","_box","union","children","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","distanceToSquared","intersectsPlane","plane","normal","constant","intersectsTriangle","triangle","_center","_extents","_v0","a","_v1","b","_v2","c","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","crossVectors","clamp","distanceToPoint","getBoundingSphere","intersect","_points","translate","offset","equals","isBox3","_testAxis","v0","v1","v2","extents","j","fromArray","r","Math","abs","p0","dot","p1","p2","_sphere","Sphere","Frustum","p3","p4","p5","planes","frustum","m","me","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","intersectsObject","boundingSphere","computeBoundingSphere","intersectsSprite","sprite","negRadius","_vector1","_vector2","_normalMatrix","Plane","w","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","cross","inverseNormalLength","negate","distanceToSphere","projectPoint","intersectLine","line","direction","delta","denominator","start","t","intersectsLine","startSign","endSign","end","coplanarPoint","optionalNormalMatrix","normalMatrix","getNormalMatrix","referencePoint","applyMatrix3","isPlane","_toFarthestPoint","_toPoint","optionalCenter","maxRadiusSq","sqrt","distanceTo","radiusSum","deltaLengthSq","getBoundingBox","getMaxScaleOnAxis","lengthSq","missingRadiusHalf","width","value","height","setScalar","setX","setY","setComponent","index","Error","getComponent","v","console","warn","s","addScaledVector","subScalar","divide","divideScalar","clampScalar","minVal","maxVal","clampLength","floor","ceil","round","roundToZero","manhattanLength","atan2","PI","dx","dy","manhattanDistanceTo","setLength","lerp","alpha","lerpVectors","rotateAround","cos","sin","random","Symbol","iterator","isVector2","Vector4","setZ","setW","setAxisAngleFromQuaternion","q","acos","setAxisAngleFromRotationMatrix","epsilon","epsilon2","te","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","getW","isVector4"],"sourceRoot":""}