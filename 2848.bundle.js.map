{"version":3,"file":"2848.bundle.js","mappings":"wLAGA,MAAMA,UAAsB,EAAAC,eAE3BC,YAAaC,EAAQ,EAAGC,EAAS,EAAGC,EAAgB,EAAGC,EAAiB,GAEvEC,QACAC,KAAKC,KAAO,gBAEZD,KAAKE,WAAa,CACjBP,MAAOA,EACPC,OAAQA,EACRC,cAAeA,EACfC,eAAgBA,GAGjB,MAAMK,EAAaR,EAAQ,EACrBS,EAAcR,EAAS,EAEvBS,EAAQC,KAAKC,MAAOV,GACpBW,EAAQF,KAAKC,MAAOT,GAEpBW,EAASJ,EAAQ,EACjBK,EAASF,EAAQ,EAEjBG,EAAgBhB,EAAQU,EACxBO,EAAiBhB,EAASY,EAI1BK,EAAU,GACVC,EAAW,GACXC,EAAU,GACVC,EAAM,GAEZ,IAAM,IAAIC,EAAK,EAAGA,EAAKP,EAAQO,IAAQ,CAEtC,MAAMC,EAAID,EAAKL,EAAiBR,EAEhC,IAAM,IAAIe,EAAK,EAAGA,EAAKV,EAAQU,IAAQ,CAEtC,MAAMC,EAAID,EAAKR,EAAgBR,EAE/BW,EAASO,KAAMD,GAAKF,EAAG,GAEvBH,EAAQM,KAAM,EAAG,EAAG,GAEpBL,EAAIK,KAAMF,EAAKd,GACfW,EAAIK,KAAM,EAAMJ,EAAKT,IAMvB,IAAM,IAAIS,EAAK,EAAGA,EAAKT,EAAOS,IAE7B,IAAM,IAAIE,EAAK,EAAGA,EAAKd,EAAOc,IAAQ,CAErC,MAAMG,EAAIH,EAAKV,EAASQ,EAClBM,EAAIJ,EAAKV,GAAWQ,EAAK,GACzBO,EAAML,EAAK,EAAMV,GAAWQ,EAAK,GACjCQ,EAAMN,EAAK,EAAMV,EAASQ,EAEhCJ,EAAQQ,KAAMC,EAAGC,EAAGE,GACpBZ,EAAQQ,KAAME,EAAGC,EAAGC,GAMtBzB,KAAK0B,SAAUb,GACfb,KAAK2B,aAAc,WAAY,IAAI,EAAAC,uBAAwBd,EAAU,IACrEd,KAAK2B,aAAc,SAAU,IAAI,EAAAC,uBAAwBb,EAAS,IAClEf,KAAK2B,aAAc,KAAM,IAAI,EAAAC,uBAAwBZ,EAAK,IAI3Da,gBAAiBC,GAEhB,OAAO,IAAItC,EAAesC,EAAKnC,MAAOmC,EAAKlC,OAAQkC,EAAKjC,cAAeiC,EAAKhC","sources":["webpack://joyride/./node_modules/three/src/geometries/PlaneGeometry.js"],"sourcesContent":["import { BufferGeometry } from '../core/BufferGeometry.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\n\nclass PlaneGeometry extends BufferGeometry {\n\n\tconstructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {\n\n\t\tsuper();\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tconst width_half = width / 2;\n\t\tconst height_half = height / 2;\n\n\t\tconst gridX = Math.floor( widthSegments );\n\t\tconst gridY = Math.floor( heightSegments );\n\n\t\tconst gridX1 = gridX + 1;\n\t\tconst gridY1 = gridY + 1;\n\n\t\tconst segment_width = width / gridX;\n\t\tconst segment_height = height / gridY;\n\n\t\t//\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tconst y = iy * segment_height - height_half;\n\n\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tconst x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tconst a = ix + gridX1 * iy;\n\t\t\t\tconst b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tconst c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tconst d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );\n\n\t}\n\n}\n\nexport { PlaneGeometry, PlaneGeometry as PlaneBufferGeometry };\n"],"names":["PlaneGeometry","BufferGeometry","constructor","width","height","widthSegments","heightSegments","super","this","type","parameters","width_half","height_half","gridX","Math","floor","gridY","gridX1","gridY1","segment_width","segment_height","indices","vertices","normals","uvs","iy","y","ix","x","push","a","b","c","d","setIndex","setAttribute","Float32BufferAttribute","static","data"],"sourceRoot":""}