{"version":3,"file":"7103.bundle.js","mappings":"2JAUA,MAAMA,EAAgB,CAErBC,SAAU,CAET,SAAY,CAAEC,MAAO,MACrB,MAAS,CAAEA,MAAO,MAClB,IAAO,CAAEA,MAAO,GAChB,OAAU,CAAEA,MAAO,KACnB,MAAS,CAAEA,MAAO,KAClB,KAAQ,CAAEA,MAAO,KACjB,OAAU,CAAEA,MAAO,KACnB,OAAU,CAAEA,MAAO,KACnB,aAAgB,CAAEA,MAAO,IACzB,aAAgB,CAAEA,MAAO,IACzB,MAAS,CAAEA,MAAO,MAGnBC,aAAwB,wJAQxBC,eAA0B,20DCvB3B,MAAMC,UAAmBC,EAAA,EAExBC,YAAaC,EAAU,IAEtBC,aAEuBC,IAAlBV,GAA8BW,QAAQC,MAAO,4CAElD,MAAMC,EAASb,EAEfc,KAAKb,SAAW,YAAqBY,EAAOZ,UAE5Ca,KAAKb,SAAkB,MAAEC,MAAQY,KAAKC,kBAAmBP,GAEzDM,KAAKE,SAAW,IAAI,MAAgB,CACnCf,SAAUa,KAAKb,SACfE,aAAcU,EAAOV,aACrBC,eAAgBS,EAAOT,iBAGxBU,KAAKG,OAAS,IAAI,IAAgBH,KAAKE,UAEvCF,KAAKI,QAAS,EACdJ,KAAKK,KAAO,EACZL,KAAKM,kBAINC,OAAQC,EAAUC,EAAaC,IAEU,IAAnCF,EAASG,aAAaC,WAAqBZ,KAAKb,SAAkB,MAAEC,MAAMyB,OAAS,OAExFb,KAAKb,SAAqB,SAAEC,MAAQsB,EAAWI,QAC/Cd,KAAKb,SAAiB,KAAEC,MAAQ2B,KAAKC,SACrChB,KAAKb,SAAgB,IAAEC,MAAQ,EAE1BY,KAAKK,KAAOL,KAAKiB,OAAS,GAAoB,GAAfjB,KAAKI,QAExCJ,KAAKb,SAAmB,OAAEC,MAAQ2B,KAAKC,SAAW,GAClDhB,KAAKb,SAAkB,MAAEC,MAAQ,iBAAuB2B,KAAKG,GAAIH,KAAKG,IACtElB,KAAKb,SAAmB,OAAEC,MAAQ,iBAAuB,EAAG,GAC5DY,KAAKb,SAAmB,OAAEC,MAAQ,iBAAuB,EAAG,GAC5DY,KAAKb,SAAyB,aAAEC,MAAQ,gBAAqB,EAAG,GAChEY,KAAKb,SAAyB,aAAEC,MAAQ,gBAAqB,EAAG,GAChEY,KAAKK,KAAO,EACZL,KAAKM,mBAEMN,KAAKK,KAAOL,KAAKiB,MAAQjB,KAAKiB,MAAQ,GAEjDjB,KAAKb,SAAmB,OAAEC,MAAQ2B,KAAKC,SAAW,GAClDhB,KAAKb,SAAkB,MAAEC,MAAQ,iBAAuB2B,KAAKG,GAAIH,KAAKG,IACtElB,KAAKb,SAAyB,aAAEC,MAAQ,gBAAqB,EAAG,GAChEY,KAAKb,SAAyB,aAAEC,MAAQ,gBAAqB,EAAG,GAChEY,KAAKb,SAAmB,OAAEC,MAAQ,iBAAuB,GAAK,IAC9DY,KAAKb,SAAmB,OAAEC,MAAQ,iBAAuB,GAAK,KAEpC,GAAfY,KAAKI,SAEhBJ,KAAKb,SAAgB,IAAEC,MAAQ,GAIhCY,KAAKK,OAEAL,KAAKmB,gBAETX,EAASY,gBAAiB,MAC1BpB,KAAKG,OAAOI,OAAQC,KAIpBA,EAASY,gBAAiBX,GACrBT,KAAKqB,OAAQb,EAASa,QAC3BrB,KAAKG,OAAOI,OAAQC,IAMtBF,kBAECN,KAAKiB,MAAQ,cAAmB,IAAK,KAItChB,kBAAmBP,GAElB,MAAM4B,EAAW,IAAIC,aAAc7B,EAAUA,GACvC8B,EAAS9B,EAAUA,EAEzB,IAAM,IAAI+B,EAAI,EAAGA,EAAID,EAAQC,IAAO,CAEnC,MAAMC,EAAM,gBAAqB,EAAG,GACpCJ,EAAUG,GAAMC,EAIjB,MAAMZ,EAAU,IAAI,MAAaQ,EAAU5B,EAASA,EAAS,MAAW,OAExE,OADAoB,EAAQa,aAAc,EACfb,K,sDCxGT,MAAMtB,EAELC,cAGCO,KAAK4B,SAAU,EAGf5B,KAAK6B,WAAY,EAGjB7B,KAAKqB,OAAQ,EAGbrB,KAAKmB,gBAAiB,EAIvBW,WAEAvB,SAECV,QAAQC,MAAO,+DAQjB,MAAMiC,EAAU,IAAI,OAAsB,EAAG,EAAG,GAAK,EAAG,EAAG,GAIrDC,EAAY,IAAI,MACtBA,EAAUC,aAAc,WAAY,IAAI,MAAwB,EAAI,EAAG,EAAG,GAAK,GAAK,EAAG,EAAG,GAAK,EAAG,GAAK,IACvGD,EAAUC,aAAc,KAAM,IAAI,MAAwB,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,GAAK,IAEhF,MAAMC,EAELzC,YAAaS,GAEZF,KAAKmC,MAAQ,IAAI,MAAMH,EAAW9B,GAInCkC,UAECpC,KAAKmC,MAAME,SAASD,UAIrB7B,OAAQC,GAEPA,EAASD,OAAQP,KAAKmC,MAAOJ,GAI1B7B,eAEH,OAAOF,KAAKmC,MAAMjC,SAIfA,aAAUd,GAEbY,KAAKmC,MAAMjC,SAAWd","sources":["webpack://joyride/./node_modules/three/examples/jsm/shaders/DigitalGlitch.js","webpack://joyride/./node_modules/three/examples/jsm/postprocessing/GlitchPass.js","webpack://joyride/./node_modules/three/examples/jsm/postprocessing/Pass.js"],"sourcesContent":["/**\n * RGB Shift Shader\n * Shifts red and blue channels from center in opposite directions\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\n * by Tom Butterworth / http://kriss.cx/tom/\n *\n * amount: shift distance (1 is width of input)\n * angle: shift angle in radians\n */\n\nconst DigitalGlitch = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null }, //diffuse texture\n\t\t'tDisp': { value: null }, //displacement texture for digital glitch squares\n\t\t'byp': { value: 0 }, //apply the glitch ?\n\t\t'amount': { value: 0.08 },\n\t\t'angle': { value: 0.02 },\n\t\t'seed': { value: 0.02 },\n\t\t'seed_x': { value: 0.02 }, //-1,1\n\t\t'seed_y': { value: 0.02 }, //-1,1\n\t\t'distortion_x': { value: 0.5 },\n\t\t'distortion_y': { value: 0.6 },\n\t\t'col_s': { value: 0.05 }\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\t\tvoid main() {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform int byp; //should we apply the glitch ?\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform sampler2D tDisp;\n\n\t\tuniform float amount;\n\t\tuniform float angle;\n\t\tuniform float seed;\n\t\tuniform float seed_x;\n\t\tuniform float seed_y;\n\t\tuniform float distortion_x;\n\t\tuniform float distortion_y;\n\t\tuniform float col_s;\n\n\t\tvarying vec2 vUv;\n\n\n\t\tfloat rand(vec2 co){\n\t\t\treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n\t\t}\n\n\t\tvoid main() {\n\t\t\tif(byp<1) {\n\t\t\t\tvec2 p = vUv;\n\t\t\t\tfloat xs = floor(gl_FragCoord.x / 0.5);\n\t\t\t\tfloat ys = floor(gl_FragCoord.y / 0.5);\n\t\t\t\t//based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\n\t\t\t\tfloat disp = texture2D(tDisp, p*seed*seed).r;\n\t\t\t\tif(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\n\t\t\t\t\tif(seed_x>0.){\n\t\t\t\t\t\tp.y = 1. - (p.y + distortion_y);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tp.y = distortion_y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {\n\t\t\t\t\tif(seed_y>0.){\n\t\t\t\t\t\tp.x=distortion_x;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tp.x = 1. - (p.x + distortion_x);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tp.x+=disp*seed_x*(seed/5.);\n\t\t\t\tp.y+=disp*seed_y*(seed/5.);\n\t\t\t\t//base from RGB shift shader\n\t\t\t\tvec2 offset = amount * vec2( cos(angle), sin(angle));\n\t\t\t\tvec4 cr = texture2D(tDiffuse, p + offset);\n\t\t\t\tvec4 cga = texture2D(tDiffuse, p);\n\t\t\t\tvec4 cb = texture2D(tDiffuse, p - offset);\n\t\t\t\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n\t\t\t\t//add noise\n\t\t\t\tvec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);\n\t\t\t\tgl_FragColor = gl_FragColor+ snow;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tgl_FragColor=texture2D (tDiffuse, vUv);\n\t\t\t}\n\t\t}`\n\n};\n\nexport { DigitalGlitch };\n","import {\n\tDataTexture,\n\tFloatType,\n\tMathUtils,\n\tRedFormat,\n\tLuminanceFormat,\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { DigitalGlitch } from '../shaders/DigitalGlitch.js';\n\nclass GlitchPass extends Pass {\n\n\tconstructor( dt_size = 64 ) {\n\n\t\tsuper();\n\n\t\tif ( DigitalGlitch === undefined ) console.error( 'THREE.GlitchPass relies on DigitalGlitch' );\n\n\t\tconst shader = DigitalGlitch;\n\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.uniforms[ 'tDisp' ].value = this.generateHeightmap( dt_size );\n\n\t\tthis.material = new ShaderMaterial( {\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\t\t} );\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t\tthis.goWild = false;\n\t\tthis.curF = 0;\n\t\tthis.generateTrigger();\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( renderer.capabilities.isWebGL2 === false ) this.uniforms[ 'tDisp' ].value.format = LuminanceFormat;\n\n\t\tthis.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.uniforms[ 'seed' ].value = Math.random();//default seeding\n\t\tthis.uniforms[ 'byp' ].value = 0;\n\n\t\tif ( this.curF % this.randX == 0 || this.goWild == true ) {\n\n\t\t\tthis.uniforms[ 'amount' ].value = Math.random() / 30;\n\t\t\tthis.uniforms[ 'angle' ].value = MathUtils.randFloat( - Math.PI, Math.PI );\n\t\t\tthis.uniforms[ 'seed_x' ].value = MathUtils.randFloat( - 1, 1 );\n\t\t\tthis.uniforms[ 'seed_y' ].value = MathUtils.randFloat( - 1, 1 );\n\t\t\tthis.uniforms[ 'distortion_x' ].value = MathUtils.randFloat( 0, 1 );\n\t\t\tthis.uniforms[ 'distortion_y' ].value = MathUtils.randFloat( 0, 1 );\n\t\t\tthis.curF = 0;\n\t\t\tthis.generateTrigger();\n\n\t\t} else if ( this.curF % this.randX < this.randX / 5 ) {\n\n\t\t\tthis.uniforms[ 'amount' ].value = Math.random() / 90;\n\t\t\tthis.uniforms[ 'angle' ].value = MathUtils.randFloat( - Math.PI, Math.PI );\n\t\t\tthis.uniforms[ 'distortion_x' ].value = MathUtils.randFloat( 0, 1 );\n\t\t\tthis.uniforms[ 'distortion_y' ].value = MathUtils.randFloat( 0, 1 );\n\t\t\tthis.uniforms[ 'seed_x' ].value = MathUtils.randFloat( - 0.3, 0.3 );\n\t\t\tthis.uniforms[ 'seed_y' ].value = MathUtils.randFloat( - 0.3, 0.3 );\n\n\t\t} else if ( this.goWild == false ) {\n\n\t\t\tthis.uniforms[ 'byp' ].value = 1;\n\n\t\t}\n\n\t\tthis.curF ++;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tif ( this.clear ) renderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\tgenerateTrigger() {\n\n\t\tthis.randX = MathUtils.randInt( 120, 240 );\n\n\t}\n\n\tgenerateHeightmap( dt_size ) {\n\n\t\tconst data_arr = new Float32Array( dt_size * dt_size );\n\t\tconst length = dt_size * dt_size;\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tconst val = MathUtils.randFloat( 0, 1 );\n\t\t\tdata_arr[ i ] = val;\n\n\t\t}\n\n\t\tconst texture = new DataTexture( data_arr, dt_size, dt_size, RedFormat, FloatType );\n\t\ttexture.needsUpdate = true;\n\t\treturn texture;\n\n\t}\n\n}\n\nexport { GlitchPass };\n","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n"],"names":["DigitalGlitch","uniforms","value","vertexShader","fragmentShader","GlitchPass","Pass","constructor","dt_size","super","undefined","console","error","shader","this","generateHeightmap","material","fsQuad","goWild","curF","generateTrigger","render","renderer","writeBuffer","readBuffer","capabilities","isWebGL2","format","texture","Math","random","randX","PI","renderToScreen","setRenderTarget","clear","data_arr","Float32Array","length","i","val","needsUpdate","enabled","needsSwap","setSize","_camera","_geometry","setAttribute","FullScreenQuad","_mesh","dispose","geometry"],"sourceRoot":""}