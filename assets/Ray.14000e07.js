import{V as m}from"./Vector3.5db2ef2e.js";const h=new m,M=new m,x=new m,y=new m,S=new m,p=new m,T=new m;class w{constructor(t=new m,r=new m(0,0,-1)){this.origin=t,this.direction=r}set(t,r){return this.origin.copy(t),this.direction.copy(r),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,r){return r.copy(this.direction).multiplyScalar(t).add(this.origin)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,h)),this}closestPointToPoint(t,r){r.subVectors(t,this.origin);const n=r.dot(this.direction);return n<0?r.copy(this.origin):r.copy(this.direction).multiplyScalar(n).add(this.origin)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const r=h.subVectors(t,this.origin).dot(this.direction);return r<0?this.origin.distanceToSquared(t):(h.copy(this.direction).multiplyScalar(r).add(this.origin),h.distanceToSquared(t))}distanceSqToSegment(t,r,n,d){M.copy(t).add(r).multiplyScalar(.5),x.copy(r).sub(t).normalize(),y.copy(this.origin).sub(M);const o=t.distanceTo(r)*.5,e=-this.direction.dot(x),c=y.dot(this.direction),a=-y.dot(x),u=y.lengthSq(),l=Math.abs(1-e*e);let s,i,f,g;if(l>0)if(s=e*a-c,i=e*c-a,g=o*l,s>=0)if(i>=-g)if(i<=g){const z=1/l;s*=z,i*=z,f=s*(s+e*i+2*c)+i*(e*s+i+2*a)+u}else i=o,s=Math.max(0,-(e*i+c)),f=-s*s+i*(i+2*a)+u;else i=-o,s=Math.max(0,-(e*i+c)),f=-s*s+i*(i+2*a)+u;else i<=-g?(s=Math.max(0,-(-e*o+c)),i=s>0?-o:Math.min(Math.max(-o,-a),o),f=-s*s+i*(i+2*a)+u):i<=g?(s=0,i=Math.min(Math.max(-o,-a),o),f=i*(i+2*a)+u):(s=Math.max(0,-(e*o+c)),i=s>0?o:Math.min(Math.max(-o,-a),o),f=-s*s+i*(i+2*a)+u);else i=e>0?-o:o,s=Math.max(0,-(e*i+c)),f=-s*s+i*(i+2*a)+u;return n&&n.copy(this.direction).multiplyScalar(s).add(this.origin),d&&d.copy(x).multiplyScalar(i).add(M),f}intersectSphere(t,r){h.subVectors(t.center,this.origin);const n=h.dot(this.direction),d=h.dot(h)-n*n,o=t.radius*t.radius;if(d>o)return null;const e=Math.sqrt(o-d),c=n-e,a=n+e;return c<0&&a<0?null:c<0?this.at(a,r):this.at(c,r)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const r=t.normal.dot(this.direction);if(r===0)return t.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(t.normal)+t.constant)/r;return n>=0?n:null}intersectPlane(t,r){const n=this.distanceToPlane(t);return n===null?null:this.at(n,r)}intersectsPlane(t){const r=t.distanceToPoint(this.origin);return r===0||t.normal.dot(this.direction)*r<0}intersectBox(t,r){let n,d,o,e,c,a;const u=1/this.direction.x,l=1/this.direction.y,s=1/this.direction.z,i=this.origin;return u>=0?(n=(t.min.x-i.x)*u,d=(t.max.x-i.x)*u):(n=(t.max.x-i.x)*u,d=(t.min.x-i.x)*u),l>=0?(o=(t.min.y-i.y)*l,e=(t.max.y-i.y)*l):(o=(t.max.y-i.y)*l,e=(t.min.y-i.y)*l),n>e||o>d||((o>n||n!==n)&&(n=o),(e<d||d!==d)&&(d=e),s>=0?(c=(t.min.z-i.z)*s,a=(t.max.z-i.z)*s):(c=(t.max.z-i.z)*s,a=(t.min.z-i.z)*s),n>a||c>d)||((c>n||n!==n)&&(n=c),(a<d||d!==d)&&(d=a),d<0)?null:this.at(n>=0?n:d,r)}intersectsBox(t){return this.intersectBox(t,h)!==null}intersectTriangle(t,r,n,d,o){S.subVectors(r,t),p.subVectors(n,t),T.crossVectors(S,p);let e=this.direction.dot(T),c;if(e>0){if(d)return null;c=1}else if(e<0)c=-1,e=-e;else return null;y.subVectors(this.origin,t);const a=c*this.direction.dot(p.crossVectors(y,p));if(a<0)return null;const u=c*this.direction.dot(S.cross(y));if(u<0||a+u>e)return null;const l=-c*y.dot(T);return l<0?null:this.at(l/e,o)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}export{w as R};
