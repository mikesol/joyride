import{InstancedBufferAttribute as c}from"./InstancedBufferAttribute.aa91042e.js";import{M as p}from"./Mesh.53231fd1.js";import{Matrix4 as h}from"./Matrix4.0c7a2215.js";import"./BufferAttribute.ad6349b3.js";import"./Vector4.27798d04.js";import"./Vector3.5db2ef2e.js";import"./MathUtils.9169ae61.js";import"./Vector2.3964b2c2.js";import"./Color.5efc95ab.js";import"./constants.cc13e4fd.js";import"./Sphere.bf80223e.js";import"./Ray.14000e07.js";import"./Object3D.d81adcf4.js";import"./EventDispatcher.62ae53dd.js";import"./Euler.d28ed76f.js";import"./Layers.61b05682.js";import"./Matrix3.254ef6d6.js";import"./Material.3b90100d.js";import"./BufferGeometry.d5615ad3.js";import"./utils.4cfc5b76.js";const l=new h,m=new h,n=[],i=new p;class M extends p{constructor(t,r,o){super(t,r),this.instanceMatrix=new c(new Float32Array(o*16),16),this.instanceColor=null,this.count=o,this.frustumCulled=!1}copy(t){return super.copy(t),this.instanceMatrix.copy(t.instanceMatrix),t.instanceColor!==null&&(this.instanceColor=t.instanceColor.clone()),this.count=t.count,this}getColorAt(t,r){r.fromArray(this.instanceColor.array,t*3)}getMatrixAt(t,r){r.fromArray(this.instanceMatrix.array,t*16)}raycast(t,r){const o=this.matrixWorld,y=this.count;if(i.geometry=this.geometry,i.material=this.material,i.material!==void 0)for(let s=0;s<y;s++){this.getMatrixAt(s,l),m.multiplyMatrices(o,l),i.matrixWorld=m,i.raycast(t,n);for(let e=0,u=n.length;e<u;e++){const a=n[e];a.instanceId=s,a.object=this,r.push(a)}n.length=0}}setColorAt(t,r){this.instanceColor===null&&(this.instanceColor=new c(new Float32Array(this.instanceMatrix.count*3),3)),r.toArray(this.instanceColor.array,t*3)}setMatrixAt(t,r){r.toArray(this.instanceMatrix.array,t*16)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}M.prototype.isInstancedMesh=!0;export{M as InstancedMesh};
