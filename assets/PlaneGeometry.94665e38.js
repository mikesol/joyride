import{BufferGeometry as G}from"./BufferGeometry.d5615ad3.js";import{Float32BufferAttribute as u}from"./BufferAttribute.ad6349b3.js";import"./Vector3.5db2ef2e.js";import"./MathUtils.9169ae61.js";import"./Vector2.3964b2c2.js";import"./Sphere.bf80223e.js";import"./EventDispatcher.62ae53dd.js";import"./Object3D.d81adcf4.js";import"./Matrix4.0c7a2215.js";import"./Euler.d28ed76f.js";import"./Layers.61b05682.js";import"./Matrix3.254ef6d6.js";import"./utils.4cfc5b76.js";import"./Vector4.27798d04.js";import"./Color.5efc95ab.js";import"./constants.cc13e4fd.js";class w extends G{constructor(o=1,p=1,f=1,l=1){super(),this.type="PlaneGeometry",this.parameters={width:o,height:p,widthSegments:f,heightSegments:l};const y=o/2,x=p/2,i=Math.floor(f),n=Math.floor(l),r=i+1,b=n+1,A=o/i,v=p/n,c=[],g=[],a=[],h=[];for(let t=0;t<b;t++){const s=t*v-x;for(let e=0;e<r;e++){const m=e*A-y;g.push(m,-s,0),a.push(0,0,1),h.push(e/i),h.push(1-t/n)}}for(let t=0;t<n;t++)for(let s=0;s<i;s++){const e=s+r*t,m=s+r*(t+1),B=s+1+r*(t+1),d=s+1+r*t;c.push(e,m,d),c.push(m,B,d)}this.setIndex(c),this.setAttribute("position",new u(g,3)),this.setAttribute("normal",new u(a,3)),this.setAttribute("uv",new u(h,2))}static fromJSON(o){return new w(o.width,o.height,o.widthSegments,o.heightSegments)}}export{w as PlaneBufferGeometry,w as PlaneGeometry};
