import{R as l}from"./Ray.14000e07.js";import{L as y}from"./Layers.61b05682.js";import"./Vector3.5db2ef2e.js";import"./MathUtils.9169ae61.js";class m{constructor(r,t,i=0,e=1/0){this.ray=new l(r,t),this.near=i,this.far=e,this.camera=null,this.layers=new y,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(r,t){this.ray.set(r,t)}setFromCamera(r,t){t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(r.x,r.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t.isOrthographicCamera?(this.ray.origin.set(r.x,r.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type: "+t.type)}intersectObject(r,t=!0,i=[]){return o(r,this,i,t),i.sort(h),i}intersectObjects(r,t=!0,i=[]){for(let e=0,n=r.length;e<n;e++)o(r[e],this,i,t);return i.sort(h),i}}function h(s,r){return s.distance-r.distance}function o(s,r,t,i){if(s.layers.test(r.layers)&&s.raycast(r,t),i===!0){const e=s.children;for(let n=0,a=e.length;n<a;n++)o(e[n],r,t,!0)}}export{m as Raycaster};
