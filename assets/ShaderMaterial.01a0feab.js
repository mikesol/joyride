import{M as f}from"./Material.3b90100d.js";function o(n){const i={};for(const t in n){i[t]={};for(const r in n[t]){const e=n[t][r];e&&(e.isColor||e.isMatrix3||e.isMatrix4||e.isVector2||e.isVector3||e.isVector4||e.isTexture||e.isQuaternion)?i[t][r]=e.clone():Array.isArray(e)?i[t][r]=e.slice():i[t][r]=e}}return i}function l(n){const i={};for(let t=0;t<n.length;t++){const r=o(n[t]);for(const e in r)i[e]=r[e]}return i}const c={clone:o,merge:l},h=`
void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}
`,u=`
void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}
`;class a extends f{constructor(i){super(),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader=h,this.fragmentShader=u,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,i!==void 0&&(i.attributes!==void 0&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(i))}copy(i){return super.copy(i),this.fragmentShader=i.fragmentShader,this.vertexShader=i.vertexShader,this.uniforms=o(i.uniforms),this.defines=Object.assign({},i.defines),this.wireframe=i.wireframe,this.wireframeLinewidth=i.wireframeLinewidth,this.fog=i.fog,this.lights=i.lights,this.clipping=i.clipping,this.extensions=Object.assign({},i.extensions),this.glslVersion=i.glslVersion,this}toJSON(i){const t=super.toJSON(i);t.glslVersion=this.glslVersion,t.uniforms={};for(const e in this.uniforms){const s=this.uniforms[e].value;s&&s.isTexture?t.uniforms[e]={type:"t",value:s.toJSON(i).uuid}:s&&s.isColor?t.uniforms[e]={type:"c",value:s.getHex()}:s&&s.isVector2?t.uniforms[e]={type:"v2",value:s.toArray()}:s&&s.isVector3?t.uniforms[e]={type:"v3",value:s.toArray()}:s&&s.isVector4?t.uniforms[e]={type:"v4",value:s.toArray()}:s&&s.isMatrix3?t.uniforms[e]={type:"m3",value:s.toArray()}:s&&s.isMatrix4?t.uniforms[e]={type:"m4",value:s.toArray()}:t.uniforms[e]={value:s}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader;const r={};for(const e in this.extensions)this.extensions[e]===!0&&(r[e]=!0);return Object.keys(r).length>0&&(t.extensions=r),t}}a.prototype.isShaderMaterial=!0;const g=Object.freeze(Object.defineProperty({__proto__:null,ShaderMaterial:a},Symbol.toStringTag,{value:"Module"}));export{a as S,c as U,g as a,o as c,l as m};
