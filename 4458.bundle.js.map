{"version":3,"file":"4458.bundle.js","mappings":"yIAOA,MAAMA,EAELC,cAGCC,KAAKC,SAAU,EAGfD,KAAKE,WAAY,EAGjBF,KAAKG,OAAQ,EAGbH,KAAKI,gBAAiB,EAIvBC,WAEAC,SAECC,QAAQC,MAAO,+DAQjB,MAAMC,EAAU,IAAI,OAAsB,EAAG,EAAG,GAAK,EAAG,EAAG,GAIrDC,EAAY,IAAI,MACtBA,EAAUC,aAAc,WAAY,IAAI,MAAwB,EAAI,EAAG,EAAG,GAAK,GAAK,EAAG,EAAG,GAAK,EAAG,GAAK,IACvGD,EAAUC,aAAc,KAAM,IAAI,MAAwB,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,GAAK,IAEhF,MAAMC,EAELb,YAAac,GAEZb,KAAKc,MAAQ,IAAI,MAAMJ,EAAWG,GAInCE,UAECf,KAAKc,MAAME,SAASD,UAIrBT,OAAQW,GAEPA,EAASX,OAAQN,KAAKc,MAAOL,GAI1BI,eAEH,OAAOb,KAAKc,MAAMD,SAIfA,aAAUK,GAEblB,KAAKc,MAAMD,SAAWK,K,wECpExB,MAAMC,UAAmB,IAExBpB,YAAaqB,EAAOC,EAAQC,EAAkBC,EAAYC,GAEzDC,QAEAzB,KAAKoB,MAAQA,EACbpB,KAAKqB,OAASA,EAEdrB,KAAKsB,iBAAmBA,EAExBtB,KAAKuB,WAAaA,EAClBvB,KAAKwB,gBAA8BE,IAAfF,EAA6BA,EAAa,EAE9DxB,KAAKG,OAAQ,EACbH,KAAK2B,YAAa,EAClB3B,KAAKE,WAAY,EACjBF,KAAK4B,eAAiB,IAAI,MAI3BtB,OAAQW,EAAUY,EAAaC,GAE9B,MAAMC,EAAed,EAASe,UAG9B,IAAIC,EAAeC,EAFnBjB,EAASe,WAAY,OAIUN,IAA1B1B,KAAKsB,mBAETY,EAAsBlC,KAAKoB,MAAME,iBAEjCtB,KAAKoB,MAAME,iBAAmBtB,KAAKsB,kBAI/BtB,KAAKuB,aAETN,EAASkB,cAAenC,KAAK4B,gBAC7BK,EAAgBhB,EAASmB,gBAEzBnB,EAASoB,cAAerC,KAAKuB,WAAYvB,KAAKwB,aAI1CxB,KAAK2B,YAETV,EAASU,aAIVV,EAASqB,gBAAiBtC,KAAKI,eAAiB,KAAO0B,GAGlD9B,KAAKG,OAAQc,EAASd,MAAOc,EAASsB,eAAgBtB,EAASuB,eAAgBvB,EAASwB,kBAC7FxB,EAASX,OAAQN,KAAKoB,MAAOpB,KAAKqB,QAE7BrB,KAAKuB,YAETN,EAASoB,cAAerC,KAAK4B,eAAgBK,QAIfP,IAA1B1B,KAAKsB,mBAETtB,KAAKoB,MAAME,iBAAmBY,GAI/BjB,EAASe,UAAYD","sources":["webpack://joyride/./node_modules/three/examples/jsm/postprocessing/Pass.js","webpack://joyride/./node_modules/three/examples/jsm/postprocessing/RenderPass.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","import {\n\tColor\n} from 'three';\nimport { Pass } from './Pass.js';\n\nclass RenderPass extends Pass {\n\n\tconstructor( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\tthis.clearColor = clearColor;\n\t\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\t\tthis.clear = true;\n\t\tthis.clearDepth = false;\n\t\tthis.needsSwap = false;\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tlet oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n}\n\nexport { RenderPass };\n"],"names":["Pass","constructor","this","enabled","needsSwap","clear","renderToScreen","setSize","render","console","error","_camera","_geometry","setAttribute","FullScreenQuad","material","_mesh","dispose","geometry","renderer","value","RenderPass","scene","camera","overrideMaterial","clearColor","clearAlpha","super","undefined","clearDepth","_oldClearColor","writeBuffer","readBuffer","oldAutoClear","autoClear","oldClearAlpha","oldOverrideMaterial","getClearColor","getClearAlpha","setClearColor","setRenderTarget","autoClearColor","autoClearDepth","autoClearStencil"],"sourceRoot":""}