{"version":3,"file":"7531.bundle.js","mappings":"yIAOA,MAAMA,EAELC,cAGCC,KAAKC,SAAU,EAGfD,KAAKE,WAAY,EAGjBF,KAAKG,OAAQ,EAGbH,KAAKI,gBAAiB,EAIvBC,WAEAC,SAECC,QAAQC,MAAO,+DAQjB,MAAMC,EAAU,IAAI,OAAsB,EAAG,EAAG,GAAK,EAAG,EAAG,GAIrDC,EAAY,IAAI,MACtBA,EAAUC,aAAc,WAAY,IAAI,MAAwB,EAAI,EAAG,EAAG,GAAK,GAAK,EAAG,EAAG,GAAK,EAAG,GAAK,IACvGD,EAAUC,aAAc,KAAM,IAAI,MAAwB,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,GAAK,IAEhF,MAAMC,EAELb,YAAac,GAEZb,KAAKc,MAAQ,IAAI,MAAMJ,EAAWG,GAInCE,UAECf,KAAKc,MAAME,SAASD,UAIrBT,OAAQW,GAEPA,EAASX,OAAQN,KAAKc,MAAOL,GAI1BI,eAEH,OAAOb,KAAKc,MAAMD,SAIfA,aAAUK,GAEblB,KAAKc,MAAMD,SAAWK,K,wECnExB,MAAMC,UAAmB,IAExBpB,YAAaqB,EAAQC,GAEpBC,QAEAtB,KAAKqB,eAA4BE,IAAdF,EAA4BA,EAAY,WAEtDD,aAAkB,OAEtBpB,KAAKwB,SAAWJ,EAAOI,SAEvBxB,KAAKa,SAAWO,GAELA,IAEXpB,KAAKwB,SAAW,YAAqBJ,EAAOI,UAE5CxB,KAAKa,SAAW,IAAI,MAAgB,CAEnCY,QAASC,OAAOC,OAAQ,GAAIP,EAAOK,SACnCD,SAAUxB,KAAKwB,SACfI,aAAcR,EAAOQ,aACrBC,eAAgBT,EAAOS,kBAMzB7B,KAAK8B,OAAS,IAAI,IAAgB9B,KAAKa,UAIxCP,OAAQW,EAAUc,EAAaC,GAEzBhC,KAAKwB,SAAUxB,KAAKqB,aAExBrB,KAAKwB,SAAUxB,KAAKqB,WAAYH,MAAQc,EAAWC,SAIpDjC,KAAK8B,OAAOjB,SAAWb,KAAKa,SAEvBb,KAAKI,gBAETa,EAASiB,gBAAiB,MAC1BlC,KAAK8B,OAAOxB,OAAQW,KAIpBA,EAASiB,gBAAiBH,GAErB/B,KAAKG,OAAQc,EAASd,MAAOc,EAASkB,eAAgBlB,EAASmB,eAAgBnB,EAASoB,kBAC7FrC,KAAK8B,OAAOxB,OAAQW","sources":["webpack://joyride/./node_modules/three/examples/jsm/postprocessing/Pass.js","webpack://joyride/./node_modules/three/examples/jsm/postprocessing/ShaderPass.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass ShaderPass extends Pass {\n\n\tconstructor( shader, textureID ) {\n\n\t\tsuper();\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n}\n\nexport { ShaderPass };\n"],"names":["Pass","constructor","this","enabled","needsSwap","clear","renderToScreen","setSize","render","console","error","_camera","_geometry","setAttribute","FullScreenQuad","material","_mesh","dispose","geometry","renderer","value","ShaderPass","shader","textureID","super","undefined","uniforms","defines","Object","assign","vertexShader","fragmentShader","fsQuad","writeBuffer","readBuffer","texture","setRenderTarget","autoClearColor","autoClearDepth","autoClearStencil"],"sourceRoot":""}