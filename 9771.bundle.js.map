{"version":3,"file":"9771.bundle.js","mappings":"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","sources":["webpack://joyride/./node_modules/three/src/math/Box3.js","webpack://joyride/./node_modules/three/src/math/Sphere.js"],"sourcesContent":["import { Vector3 } from './Vector3.js';\n\nclass Box3 {\n\n\tconstructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromArray( array ) {\n\n\t\tlet minX = + Infinity;\n\t\tlet minY = + Infinity;\n\t\tlet minZ = + Infinity;\n\n\t\tlet maxX = - Infinity;\n\t\tlet maxY = - Infinity;\n\t\tlet maxZ = - Infinity;\n\n\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tconst x = array[ i ];\n\t\t\tconst y = array[ i + 1 ];\n\t\t\tconst z = array[ i + 2 ];\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromBufferAttribute( attribute ) {\n\n\t\tlet minX = + Infinity;\n\t\tlet minY = + Infinity;\n\t\tlet minZ = + Infinity;\n\n\t\tlet maxX = - Infinity;\n\t\tlet maxY = - Infinity;\n\t\tlet maxZ = - Infinity;\n\n\t\tfor ( let i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\tconst x = attribute.getX( i );\n\t\t\tconst y = attribute.getY( i );\n\t\t\tconst z = attribute.getZ( i );\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector.copy( size ).multiplyScalar( 0.5 );\n\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromObject( object, precise = false ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object, precise );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\texpandByObject( object, precise = false ) {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tobject.updateWorldMatrix( false, false );\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry !== undefined ) {\n\n\t\t\tif ( precise && geometry.attributes != undefined && geometry.attributes.position !== undefined ) {\n\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tfor ( let i = 0, l = position.count; i < l; i ++ ) {\n\n\t\t\t\t\t_vector.fromBufferAttribute( position, i ).applyMatrix4( object.matrixWorld );\n\t\t\t\t\tthis.expandByPoint( _vector );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t}\n\n\t\t\t\t_box.copy( geometry.boundingBox );\n\t\t\t\t_box.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tthis.union( _box );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis.expandByObject( children[ i ], precise );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\t// Find the point on the AABB closest to the sphere center.\n\t\tthis.clampPoint( sphere.center, _vector );\n\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\treturn _vector.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tlet min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t}\n\n\tintersectsTriangle( triangle ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// compute box center and extents\n\t\tthis.getCenter( _center );\n\t\t_extents.subVectors( this.max, _center );\n\n\t\t// translate triangle to aabb origin\n\t\t_v0.subVectors( triangle.a, _center );\n\t\t_v1.subVectors( triangle.b, _center );\n\t\t_v2.subVectors( triangle.c, _center );\n\n\t\t// compute edge vectors for triangle\n\t\t_f0.subVectors( _v1, _v0 );\n\t\t_f1.subVectors( _v2, _v1 );\n\t\t_f2.subVectors( _v0, _v2 );\n\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\tlet axes = [\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t];\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// test 3 face normals from the aabb\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// finally testing the face normal of the triangle\n\t\t// use already existing triangle edge vectors here\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\treturn satForAxes( axes, _v0, _v1, _v2, _extents );\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\tconst clampedPoint = _vector.copy( point ).clamp( this.min, this.max );\n\n\t\treturn clampedPoint.sub( point ).length();\n\n\t}\n\n\tgetBoundingSphere( target ) {\n\n\t\tthis.getCenter( target.center );\n\n\t\ttarget.radius = this.getSize( _vector ).length() * 0.5;\n\n\t\treturn target;\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\t// transform of empty box is an empty box.\n\t\tif ( this.isEmpty() ) return this;\n\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\tthis.setFromPoints( _points );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nBox3.prototype.isBox3 = true;\n\nconst _points = [\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3()\n];\n\nconst _vector = /*@__PURE__*/ new Vector3();\n\nconst _box = /*@__PURE__*/ new Box3();\n\n// triangle centered vertices\n\nconst _v0 = /*@__PURE__*/ new Vector3();\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\n\n// triangle edge vectors\n\nconst _f0 = /*@__PURE__*/ new Vector3();\nconst _f1 = /*@__PURE__*/ new Vector3();\nconst _f2 = /*@__PURE__*/ new Vector3();\n\nconst _center = /*@__PURE__*/ new Vector3();\nconst _extents = /*@__PURE__*/ new Vector3();\nconst _triangleNormal = /*@__PURE__*/ new Vector3();\nconst _testAxis = /*@__PURE__*/ new Vector3();\n\nfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\tfor ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t_testAxis.fromArray( axes, i );\n\t\t// project the aabb onto the separating axis\n\t\tconst r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t// project all 3 vertices of the triangle onto the separating axis\n\t\tconst p0 = v0.dot( _testAxis );\n\t\tconst p1 = v1.dot( _testAxis );\n\t\tconst p2 = v2.dot( _testAxis );\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t// the axis is separating and we can exit\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nexport { Box3 };\n","import { Box3 } from './Box3.js';\nimport { Vector3 } from './Vector3.js';\n\nconst _box = /*@__PURE__*/ new Box3();\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _toFarthestPoint = /*@__PURE__*/ new Vector3();\nconst _toPoint = /*@__PURE__*/ new Vector3();\n\nclass Sphere {\n\n\tconstructor( center = new Vector3(), radius = - 1 ) {\n\n\t\tthis.center = center;\n\t\tthis.radius = radius;\n\n\t}\n\n\tset( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points, optionalCenter ) {\n\n\t\tconst center = this.center;\n\n\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\tcenter.copy( optionalCenter );\n\n\t\t} else {\n\n\t\t\t_box.setFromPoints( points ).getCenter( center );\n\n\t\t}\n\n\t\tlet maxRadiusSq = 0;\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t}\n\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\treturn ( this.radius < 0 );\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.center.set( 0, 0, 0 );\n\t\tthis.radius = - 1;\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\tconst deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\ttarget.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\ttarget.sub( this.center ).normalize();\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tgetBoundingBox( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\t// Empty sphere produces empty bounding box\n\t\t\ttarget.makeEmpty();\n\t\t\treturn target;\n\n\t\t}\n\n\t\ttarget.set( this.center, this.center );\n\t\ttarget.expandByScalar( this.radius );\n\n\t\treturn target;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671\n\n\t\t_toPoint.subVectors( point, this.center );\n\n\t\tconst lengthSq = _toPoint.lengthSq();\n\n\t\tif ( lengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\tconst length = Math.sqrt( lengthSq );\n\t\t\tconst missingRadiusHalf = ( length - this.radius ) * 0.5;\n\n\t\t\t// Nudge this sphere towards the target point. Add half the missing distance to radius,\n\t\t\t// and the other half to position. This gives a tighter enclosure, instead of if\n\t\t\t// the whole missing distance were just added to radius.\n\n\t\t\tthis.center.add( _toPoint.multiplyScalar( missingRadiusHalf / length ) );\n\t\t\tthis.radius += missingRadiusHalf;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tunion( sphere ) {\n\n\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769\n\n\t\t// To enclose another sphere into this sphere, we only need to enclose two points:\n\t\t// 1) Enclose the farthest point on the other sphere into this sphere.\n\t\t// 2) Enclose the opposite point of the farthest point into this sphere.\n\n\t\t if ( this.center.equals( sphere.center ) === true ) {\n\n\t\t\t _toFarthestPoint.set( 0, 0, 1 ).multiplyScalar( sphere.radius );\n\n\n\t\t} else {\n\n\t\t\t_toFarthestPoint.subVectors( sphere.center, this.center ).normalize().multiplyScalar( sphere.radius );\n\n\t\t}\n\n\t\tthis.expandByPoint( _v1.copy( sphere.center ).add( _toFarthestPoint ) );\n\t\tthis.expandByPoint( _v1.copy( sphere.center ).sub( _toFarthestPoint ) );\n\n\t\treturn this;\n\n\t}\n\n\tequals( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nexport { Sphere };\n"],"names":["Box3","constructor","min","Vector3","max","this","set","copy","setFromArray","array","minX","minY","minZ","maxX","maxY","maxZ","i","l","length","x","y","z","setFromBufferAttribute","attribute","count","getX","getY","getZ","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","center","size","halfSize","_vector","multiplyScalar","sub","add","setFromObject","object","precise","expandByObject","clone","box","isEmpty","getCenter","target","addVectors","getSize","subVectors","point","expandByVector","vector","expandByScalar","scalar","addScalar","updateWorldMatrix","geometry","undefined","attributes","position","fromBufferAttribute","applyMatrix4","matrixWorld","boundingBox","computeBoundingBox","_box","union","children","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","distanceToSquared","radius","intersectsPlane","plane","normal","constant","intersectsTriangle","triangle","_center","_extents","_v0","a","_v1","b","_v2","c","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","crossVectors","clamp","distanceToPoint","getBoundingSphere","intersect","matrix","_points","translate","offset","equals","prototype","isBox3","_testAxis","v0","v1","v2","extents","j","fromArray","r","Math","abs","p0","dot","p1","p2","_toFarthestPoint","_toPoint","Sphere","optionalCenter","maxRadiusSq","sqrt","distanceTo","radiusSum","deltaLengthSq","normalize","getBoundingBox","getMaxScaleOnAxis","lengthSq","missingRadiusHalf"],"sourceRoot":""}