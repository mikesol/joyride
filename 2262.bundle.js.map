{"version":3,"file":"2262.bundle.js","mappings":"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","sources":["webpack://joyride/./node_modules/three/examples/jsm/shaders/ConvolutionShader.js","webpack://joyride/./node_modules/three/examples/jsm/postprocessing/BloomPass.js","webpack://joyride/./node_modules/three/examples/jsm/postprocessing/Pass.js"],"sourcesContent":["import {\n\tVector2\n} from 'three';\n\n/**\n * Convolution shader\n * ported from o3d sample to WebGL / GLSL\n */\n\nconst ConvolutionShader = {\n\n\tdefines: {\n\n\t\t'KERNEL_SIZE_FLOAT': '25.0',\n\t\t'KERNEL_SIZE_INT': '25'\n\n\t},\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'uImageIncrement': { value: new Vector2( 0.001953125, 0.0 ) },\n\t\t'cKernel': { value: [] }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tuniform vec2 uImageIncrement;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float cKernel[ KERNEL_SIZE_INT ];\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec2 uImageIncrement;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec2 imageCoord = vUv;\n\t\t\tvec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );\n\n\t\t\tfor( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {\n\n\t\t\t\tsum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];\n\t\t\t\timageCoord += uImageIncrement;\n\n\t\t\t}\n\n\t\t\tgl_FragColor = sum;\n\n\t\t}`,\n\n\tbuildKernel: function ( sigma ) {\n\n\t\t// We lop off the sqrt(2 * pi) * sigma term, since we're going to normalize anyway.\n\n\t\tconst kMaxKernelSize = 25;\n\t\tlet kernelSize = 2 * Math.ceil( sigma * 3.0 ) + 1;\n\n\t\tif ( kernelSize > kMaxKernelSize ) kernelSize = kMaxKernelSize;\n\n\t\tconst halfWidth = ( kernelSize - 1 ) * 0.5;\n\n\t\tconst values = new Array( kernelSize );\n\t\tlet sum = 0.0;\n\t\tfor ( let i = 0; i < kernelSize; ++ i ) {\n\n\t\t\tvalues[ i ] = gauss( i - halfWidth, sigma );\n\t\t\tsum += values[ i ];\n\n\t\t}\n\n\t\t// normalize the kernel\n\n\t\tfor ( let i = 0; i < kernelSize; ++ i ) values[ i ] /= sum;\n\n\t\treturn values;\n\n\t}\n\n};\n\nfunction gauss( x, sigma ) {\n\n\treturn Math.exp( - ( x * x ) / ( 2.0 * sigma * sigma ) );\n\n}\n\nexport { ConvolutionShader };\n","import {\n\tAdditiveBlending,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { ConvolutionShader } from '../shaders/ConvolutionShader.js';\n\nclass BloomPass extends Pass {\n\n\tconstructor( strength = 1, kernelSize = 25, sigma = 4, resolution = 256 ) {\n\n\t\tsuper();\n\n\t\t// render targets\n\n\t\tthis.renderTargetX = new WebGLRenderTarget( resolution, resolution );\n\t\tthis.renderTargetX.texture.name = 'BloomPass.x';\n\t\tthis.renderTargetY = new WebGLRenderTarget( resolution, resolution );\n\t\tthis.renderTargetY.texture.name = 'BloomPass.y';\n\n\t\t// combine material\n\n\t\tthis.combineUniforms = UniformsUtils.clone( CombineShader.uniforms );\n\n\t\tthis.combineUniforms[ 'strength' ].value = strength;\n\n\t\tthis.materialCombine = new ShaderMaterial( {\n\n\t\t\tuniforms: this.combineUniforms,\n\t\t\tvertexShader: CombineShader.vertexShader,\n\t\t\tfragmentShader: CombineShader.fragmentShader,\n\t\t\tblending: AdditiveBlending,\n\t\t\ttransparent: true\n\n\t\t} );\n\n\t\t// convolution material\n\n\t\tif ( ConvolutionShader === undefined ) console.error( 'THREE.BloomPass relies on ConvolutionShader' );\n\n\t\tconst convolutionShader = ConvolutionShader;\n\n\t\tthis.convolutionUniforms = UniformsUtils.clone( convolutionShader.uniforms );\n\n\t\tthis.convolutionUniforms[ 'uImageIncrement' ].value = BloomPass.blurX;\n\t\tthis.convolutionUniforms[ 'cKernel' ].value = ConvolutionShader.buildKernel( sigma );\n\n\t\tthis.materialConvolution = new ShaderMaterial( {\n\n\t\t\tuniforms: this.convolutionUniforms,\n\t\t\tvertexShader: convolutionShader.vertexShader,\n\t\t\tfragmentShader: convolutionShader.fragmentShader,\n\t\t\tdefines: {\n\t\t\t\t'KERNEL_SIZE_FLOAT': kernelSize.toFixed( 1 ),\n\t\t\t\t'KERNEL_SIZE_INT': kernelSize.toFixed( 0 )\n\t\t\t}\n\n\t\t} );\n\n\t\tthis.needsSwap = false;\n\n\t\tthis.fsQuad = new FullScreenQuad( null );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render quad with blured scene into texture (convolution pass 1)\n\n\t\tthis.fsQuad.material = this.materialConvolution;\n\n\t\tthis.convolutionUniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\tthis.convolutionUniforms[ 'uImageIncrement' ].value = BloomPass.blurX;\n\n\t\trenderer.setRenderTarget( this.renderTargetX );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\n\t\t// Render quad with blured scene into texture (convolution pass 2)\n\n\t\tthis.convolutionUniforms[ 'tDiffuse' ].value = this.renderTargetX.texture;\n\t\tthis.convolutionUniforms[ 'uImageIncrement' ].value = BloomPass.blurY;\n\n\t\trenderer.setRenderTarget( this.renderTargetY );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// Render original scene with superimposed blur to texture\n\n\t\tthis.fsQuad.material = this.materialCombine;\n\n\t\tthis.combineUniforms[ 'tDiffuse' ].value = this.renderTargetY.texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t}\n\n}\n\nconst CombineShader = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'strength': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float strength;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = strength * texel;\n\n\t\t}`\n\n};\n\nBloomPass.blurX = new Vector2( 0.001953125, 0.0 );\nBloomPass.blurY = new Vector2( 0.0, 0.001953125 );\n\nexport { BloomPass };\n","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n"],"names":["ConvolutionShader","defines","uniforms","value","vertexShader","fragmentShader","buildKernel","sigma","kernelSize","Math","ceil","halfWidth","values","Array","sum","i","gauss","x","exp","BloomPass","Pass","constructor","strength","resolution","super","this","renderTargetX","texture","name","renderTargetY","combineUniforms","CombineShader","materialCombine","blending","transparent","undefined","console","error","convolutionShader","convolutionUniforms","blurX","materialConvolution","toFixed","needsSwap","fsQuad","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","state","buffers","stencil","setTest","material","setRenderTarget","clear","blurY","enabled","renderToScreen","setSize","_camera","_geometry","setAttribute","FullScreenQuad","_mesh","dispose","geometry"],"sourceRoot":""}