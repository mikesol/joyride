{"version":3,"file":"5786.bundle.js","mappings":"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","sources":["webpack://joyride/./node_modules/three/examples/jsm/postprocessing/MaskPass.js","webpack://joyride/./node_modules/three/examples/jsm/postprocessing/EffectComposer.js","webpack://joyride/./node_modules/three/examples/jsm/postprocessing/Pass.js","webpack://joyride/./node_modules/three/examples/jsm/postprocessing/ShaderPass.js","webpack://joyride/./node_modules/three/examples/jsm/shaders/CopyShader.js"],"sourcesContent":["import { Pass } from './Pass.js';\n\nclass MaskPass extends Pass {\n\n\tconstructor( scene, camera ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst context = renderer.getContext();\n\t\tconst state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tlet writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n}\n\nclass ClearMaskPass extends Pass {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.needsSwap = false;\n\n\t}\n\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n}\n\nexport { MaskPass, ClearMaskPass };\n","import {\n\tBufferGeometry,\n\tClock,\n\tFloat32BufferAttribute,\n\tMesh,\n\tOrthographicCamera,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass } from './MaskPass.js';\nimport { ClearMaskPass } from './MaskPass.js';\n\nclass EffectComposer {\n\n\tconstructor( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._pixelRatio = 1;\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\t// dependencies\n\n\t\tif ( CopyShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t\t}\n\n\t\tif ( ShaderPass === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t\t}\n\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\n\t\tthis.clock = new Clock();\n\n\t}\n\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n}\n\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { EffectComposer, Pass, FullScreenQuad };\n","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass ShaderPass extends Pass {\n\n\tconstructor( shader, textureID ) {\n\n\t\tsuper();\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n}\n\nexport { ShaderPass };\n","/**\n * Full-screen textured quad shader\n */\n\nconst CopyShader = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tgl_FragColor = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor.a *= opacity;\n\n\n\t\t}`\n\n};\n\nexport { CopyShader };\n"],"names":["MaskPass","Pass","constructor","scene","camera","super","this","clear","needsSwap","inverse","render","renderer","writeBuffer","readBuffer","context","getContext","state","writeValue","clearValue","buffers","color","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","setRenderTarget","EQUAL","KEEP","ClearMaskPass","EffectComposer","renderTarget","undefined","size","getSize","_pixelRatio","getPixelRatio","_width","width","_height","height","texture","name","renderTarget1","renderTarget2","clone","renderToScreen","passes","CopyShader","C","console","error","ShaderPass","copyPass","clock","swapBuffers","tmp","addPass","pass","push","setSize","insertPass","index","splice","removePass","indexOf","isLastEnabledPass","passIndex","i","length","enabled","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","NOTEQUAL","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","_camera","_geometry","setAttribute","FullScreenQuad","material","_mesh","geometry","value","shader","textureID","uniforms","defines","Object","assign","vertexShader","fragmentShader","fsQuad","autoClearColor","autoClearDepth","autoClearStencil"],"sourceRoot":""}