"use strict";(self.webpackChunkjoyride=self.webpackChunkjoyride||[]).push([[396,96],{94:(t,e,i)=>{i.d(e,{V:()=>o});var s=i(1245),r=i(3802);class o extends r.T{constructor(){super(),this.type="Camera",this.matrixWorldInverse=new s.Matrix4,this.projectionMatrix=new s.Matrix4,this.projectionMatrixInverse=new s.Matrix4}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}o.prototype.isCamera=!0},2096:(t,e,i)=>{i.r(e),i.d(e,{PerspectiveCamera:()=>o});var s=i(94),r=i(9542);class o extends s.V{constructor(t=50,e=1,i=.1,s=2e3){super(),this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=i,this.far=s,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=2*r.I3*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(.5*r.qW*this.fov);return.5*this.getFilmHeight()/t}getEffectiveFOV(){return 2*r.I3*Math.atan(Math.tan(.5*r.qW*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(t,e,i,s,r,o){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=s,this.view.width=r,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(.5*r.qW*this.fov)/this.zoom,i=2*e,s=this.aspect*i,o=-.5*s;const n=this.view;if(null!==this.view&&this.view.enabled){const t=n.fullWidth,r=n.fullHeight;o+=n.offsetX*s/t,e-=n.offsetY*i/r,s*=n.width/t,i*=n.height/r}const a=this.filmOffset;0!==a&&(o+=t*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(o,o+s,e,e-i,t,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}o.prototype.isPerspectiveCamera=!0},7675:(t,e,i)=>{i.d(e,{_:()=>o});var s=i(3802),r=i(7282);class o extends s.T{constructor(t,e=1){super(),this.type="Light",this.color=new r.Color(t),this.intensity=e}dispose(){}copy(t){return super.copy(t),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}o.prototype.isLight=!0},6139:(t,e,i)=>{i.d(e,{h:()=>p});var s=i(1245),r=i(6120),o=i(4532),n=i(6980),a=i(3871);const h=new s.Matrix4,c=new o.Vector3,l=new o.Vector3;class p{constructor(t){this.camera=t,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new r.Vector2(512,512),this.map=null,this.mapPass=null,this.matrix=new s.Matrix4,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new a.i,this._frameExtents=new r.Vector2(1,1),this._viewportCount=1,this._viewports=[new n.L(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,i=this.matrix;c.setFromMatrixPosition(t.matrixWorld),e.position.copy(c),l.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(l),e.updateMatrixWorld(),h.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(h),i.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),i.multiply(e.projectionMatrix),i.multiply(e.matrixWorldInverse)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const t={};return 0!==this.bias&&(t.bias=this.bias),0!==this.normalBias&&(t.normalBias=this.normalBias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}},9396:(t,e,i)=>{i.r(e),i.d(e,{PointLight:()=>d});var s=i(7675),r=i(6139),o=i(2096),n=i(1245),a=i(6120),h=i(4532),c=i(6980);const l=new n.Matrix4,p=new h.Vector3,u=new h.Vector3;class m extends r.h{constructor(){super(new o.PerspectiveCamera(90,1,.5,500)),this._frameExtents=new a.Vector2(4,2),this._viewportCount=6,this._viewports=[new c.L(2,1,1,1),new c.L(0,1,1,1),new c.L(3,1,1,1),new c.L(1,1,1,1),new c.L(3,0,1,1),new c.L(1,0,1,1)],this._cubeDirections=[new h.Vector3(1,0,0),new h.Vector3(-1,0,0),new h.Vector3(0,0,1),new h.Vector3(0,0,-1),new h.Vector3(0,1,0),new h.Vector3(0,-1,0)],this._cubeUps=[new h.Vector3(0,1,0),new h.Vector3(0,1,0),new h.Vector3(0,1,0),new h.Vector3(0,1,0),new h.Vector3(0,0,1),new h.Vector3(0,0,-1)]}updateMatrices(t,e=0){const i=this.camera,s=this.matrix,r=t.distance||i.far;r!==i.far&&(i.far=r,i.updateProjectionMatrix()),p.setFromMatrixPosition(t.matrixWorld),i.position.copy(p),u.copy(i.position),u.add(this._cubeDirections[e]),i.up.copy(this._cubeUps[e]),i.lookAt(u),i.updateMatrixWorld(),s.makeTranslation(-p.x,-p.y,-p.z),l.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse),this._frustum.setFromProjectionMatrix(l)}}m.prototype.isPointLightShadow=!0;class d extends s._{constructor(t,e,i=0,s=1){super(t,e),this.type="PointLight",this.distance=i,this.decay=s,this.shadow=new m}get power(){return 4*this.intensity*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}d.prototype.isPointLight=!0},3871:(t,e,i)=>{i.d(e,{i:()=>h});var s=i(4532),r=i(9771),o=i(2158);const n=new r.Sphere,a=new s.Vector3;class h{constructor(t=new o.J,e=new o.J,i=new o.J,s=new o.J,r=new o.J,n=new o.J){this.planes=[t,e,i,s,r,n]}set(t,e,i,s,r,o){const n=this.planes;return n[0].copy(t),n[1].copy(e),n[2].copy(i),n[3].copy(s),n[4].copy(r),n[5].copy(o),this}copy(t){const e=this.planes;for(let i=0;i<6;i++)e[i].copy(t.planes[i]);return this}setFromProjectionMatrix(t){const e=this.planes,i=t.elements,s=i[0],r=i[1],o=i[2],n=i[3],a=i[4],h=i[5],c=i[6],l=i[7],p=i[8],u=i[9],m=i[10],d=i[11],w=i[12],f=i[13],y=i[14],x=i[15];return e[0].setComponents(n-s,l-a,d-p,x-w).normalize(),e[1].setComponents(n+s,l+a,d+p,x+w).normalize(),e[2].setComponents(n+r,l+h,d+u,x+f).normalize(),e[3].setComponents(n-r,l-h,d-u,x-f).normalize(),e[4].setComponents(n-o,l-c,d-m,x-y).normalize(),e[5].setComponents(n+o,l+c,d+m,x+y).normalize(),this}intersectsObject(t){const e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),n.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(n)}intersectsSprite(t){return n.center.set(0,0,0),n.radius=.7071067811865476,n.applyMatrix4(t.matrixWorld),this.intersectsSphere(n)}intersectsSphere(t){const e=this.planes,i=t.center,s=-t.radius;for(let t=0;t<6;t++)if(e[t].distanceToPoint(i)<s)return!1;return!0}intersectsBox(t){const e=this.planes;for(let i=0;i<6;i++){const s=e[i];if(a.x=s.normal.x>0?t.max.x:t.min.x,a.y=s.normal.y>0?t.max.y:t.min.y,a.z=s.normal.z>0?t.max.z:t.min.z,s.distanceToPoint(a)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let i=0;i<6;i++)if(e[i].distanceToPoint(t)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}},2158:(t,e,i)=>{i.d(e,{J:()=>h});var s=i(4894),r=i(4532);const o=new r.Vector3,n=new r.Vector3,a=new s.V;class h{constructor(t=new r.Vector3(1,0,0),e=0){this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,i,s){return this.normal.set(t,e,i),this.constant=s,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,i){const s=o.subVectors(i,e).cross(n.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(s,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)}intersectLine(t,e){const i=t.delta(o),s=this.normal.dot(i);if(0===s)return 0===this.distanceToPoint(t.start)?e.copy(t.start):null;const r=-(t.start.dot(this.normal)+this.constant)/s;return r<0||r>1?null:e.copy(i).multiplyScalar(r).add(t.start)}intersectsLine(t){const e=this.distanceToPoint(t.start),i=this.distanceToPoint(t.end);return e<0&&i>0||i<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const i=e||a.getNormalMatrix(t),s=this.coplanarPoint(o).applyMatrix4(t),r=this.normal.applyMatrix3(i).normalize();return this.constant=-s.dot(r),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return(new this.constructor).copy(this)}}h.prototype.isPlane=!0}}]);